from loader import dp, bot
from aiogram import types
from utils.db.db_utils_users import *
from utils.db.db_utils_warning import *
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import re
from aiogram.dispatcher.filters import IsReplyFilter
from ..f_lib.other import message_user_get
from utils.db import *
import html
from .base_text import final_text

@dp.message_handler(commands=["–∑–∞–≥—Å"], commands_prefix="/!.")
async def rp_spis(message: types.Message):
    nick = html.escape(message.from_user.first_name)
    await message.reply(f"<a href='tg://user?id={message.from_user.id}'>{nick}</a>, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π:\n\n\
‚ñ∑ <code>–ë—Ä–∞–∫</code> ‚Äî –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –†–ü –∫–æ–º–∞–Ω–¥.\n\
‚ñ∑ <code>–†–∞–∑–≤–æ–¥</code> ‚Äî –û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞, –∏–ª–∏ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –µ–≥–æ —Å–æ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –†–ü –∫–æ–º–∞–Ω–¥.\n\
‚ñ∑ <code>–°–æ–π—Ç–∏—Å—å</code> ‚Äî –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ç–∏–º–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –†–ü –∫–æ–º–∞–Ω–¥.\n\
‚ñ∑ <code>–ë—Ä–æ—Å–∏—Ç—å</code> ‚Äî –û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ç–∏–º–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –∏–ª–∏ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –µ–≥–æ —Å–æ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –†–ü –∫–æ–º–∞–Ω–¥.\n\
‚ñ∑ <code>–ë—Ä–∞–¥</code> ‚Äî –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Ä–æ–¥–Ω–∏—Ç—å—Å—è –∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –†–ü –∫–æ–º–∞–Ω–¥.\n\
‚ñ∑ <code>–ù–µ–±—Ä–∞–¥</code> ‚Äî –û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏, –∏–ª–∏ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –µ—ë —Å–æ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –†–ü –∫–æ–º–∞–Ω–¥.\n\
‚ñ∑ <code>–û—Ç–∫–ª–æ–Ω–∏—Ç—å</code> ‚Äî –†–∞–∑–æ—Ä–≤–∞—Ç—å –≤—Å–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –†–ü –∫–æ–º–∞–Ω–¥.\n\
‚ñ∑ <code>–û—Ç–Ω–æ—à–µ–Ω–∏—è</code> ‚Äî –£–∑–Ω–∞—Ç—å —Å–≤–æ—ë —Ä–µ–∞–ª—å–Ω–æ–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —á—É–∂–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –ö—É–∑—è —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —É–∂–µ –Ω–µ –ø—Ä–æ –≤–∞—Å.\n\
‚ñ∑ <code>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</code> ‚Äî –£–∑–Ω–∞—Ç—å —Å–≤–æ—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —á—É–∂–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –ö—É–∑—è —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —É–∂–µ –Ω–µ –ø—Ä–æ –≤–∞—Å.\n\
‚ñ∑ <code>–ë—Ä–æ—Å–∏—Ç—å –≤—Å–µ—Ö</code> ‚Äî –û—Ç–æ–∑–≤–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –≤—Å–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å–æ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã.\n")


#–¢–í–û–Ø/–ú–û–Ø –°–µ–º—å—è
@dp.message_handler(lambda message: message.text.lower() == "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
async def my_family(message: types.Message):
    if message.chat.type != 'private':
        warner = get_warner(message.chat.id, message.from_user.id)
        if warner == None:
            warner = [message.chat.id, message.from_user.id, 0, 0, 0]
        if warner[4] != 0:
            return
    
    if message.reply_to_message:
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        us = message.reply_to_message.from_user
        user = create_user(us.id, us.username, us.first_name)
        msg = "üíç –í–∞—à–∞ —Å–µ–º—å—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:\n\n"
        alone = 0


#–õ–Æ–ë–û–í–ù–ò–ö–ò
        bradstvo = get_wlovers(user[0])
        for tup in bradstvo:
            if tup != 0 and tup != None:
                for brad in tup:
                    user2 = get_user(brad)
                    msg += f"<a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å {str(user2[4]).replace('1', '–≤–∞—à–∏–º –ª—é–±–æ–≤–Ω–∏–∫–æ–º').replace('2', '–≤–∞—à–µ–π –ª—é–±–æ–≤–Ω–∏—Ü–µ–π').replace('0', '–≤–∞—à–∏–º —Å–µ–∫—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º').replace('3', '–≤–∞—à–∏–º —Å–µ–∫—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º').replace('4', '–≤–∞—à–∏–º —Å–µ–∫—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º')}\n"
                    alone = 1
        bradoses = get_wloves(user[0])
        for tup in bradoses:
            if tup != 0 and tup != None:
                for brad in tup:
                    if brad != 0 and brad != None:
                        user2 = get_user(brad)
                        msg += f"–í–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Å—Ç–∞—Ç—å {str(user2[4]).replace('1', '–≤–∞—à–∏–º  –ª—é–±–æ–≤–Ω–∏–∫–æ–º').replace('2', '–≤–∞—à–µ–π –ª—é–±–æ–≤–Ω–∏—Ü–µ–π').replace('0', '–≤–∞—à–∏–º —Å–µ–∫—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º').replace('3', '–≤–∞—à–∏–º —Å–µ–∫—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º').replace('4', '–≤–∞—à–∏–º —Å–µ–∫—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º')}\n"
                        alone = 1


#–°–£–ü–†–£–ì–ò
        bradstvo = get_wmarryers(user[0])
        for tup in bradstvo:
            if tup != 0 and tup != None:
                for brad in tup:
                    user2 = get_user(brad)
                    msg += f"<a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å {str(user2[4]).replace('1', '–≤–∞—à–∏–º –º—É–∂–µ–º').replace('2', '–≤–∞—à–µ–π –∂–µ–Ω–æ–π').replace('0', '–≤–∞—à–∏–º —Å—É–ø—Ä—É–≥–æ–º').replace('3', '–≤–∞—à–∏–º —Å—É–ø—Ä—É–≥–æ–º').replace('4', '–≤–∞—à–∏–º —Å—É–ø—Ä—É–≥–æ–º')}\n"
                    alone = 1
        bradoses = get_wmarrys(user[0])
        for tup in bradoses:
            if tup != 0 and tup != None:
                for brad in tup:
                    if brad != 0 and brad != None:
                        user2 = get_user(brad)
                        msg += f"–í–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Å—Ç–∞—Ç—å {str(user2[4]).replace('1', '–≤–∞—à–∏–º  –º—É–∂–µ–º').replace('2', '–≤–∞—à–µ–π –∂–µ–Ω–æ–π').replace('0', '–≤–∞—à–∏–º —Å—É–ø—Ä—É–≥–æ–º').replace('3', '–≤–∞—à–∏–º —Å—É–ø—Ä—É–≥–æ–º').replace('4', '–≤–∞—à–∏–º —Å—É–ø—Ä—É–≥–æ–º')}\n"
                        alone = 1


#–ë–†–ê–î–´!!!
        bradstvo = get_wsiblers(user[0])
        for tup in bradstvo:
            if tup != 0 and tup != None:
                for brad in tup:
                    user2 = get_user(brad)
                    msg += f"<a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å {str(user2[4]).replace('1', '–≤–∞—à–∏–º –±—Ä–∞—Ç–æ–º').replace('2', '–≤–∞—à–µ–π —Å–µ—Å—Ç—Ä–æ–π').replace('0', '–≤–∞—à–∏–º –±—Ä–∞–¥–æ–º').replace('3', '–≤–∞—à–∏–º –±—Ä–∞–¥–æ–º').replace('4', '–≤–∞—à–∏–º –±—Ä–∞–¥–æ–º')}\n"
                    alone = 1
        bradoses = get_wsibles(user[0])
        for tup in bradoses:
            if tup != 0 and tup != None:
                for brad in tup:
                    if brad != 0 and brad != None:
                        user2 = get_user(brad)
                        msg += f"–í–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Å—Ç–∞—Ç—å {str(user2[4]).replace('1', '–≤–∞—à–∏–º  –±—Ä–∞—Ç–æ–º').replace('2', '–≤–∞—à–µ–π —Å–µ—Å—Ç—Ä–æ–π').replace('0', '–≤–∞—à–∏–º –±—Ä–∞–¥–æ–º').replace('3', '–≤–∞—à–∏–º –±—Ä–∞–¥–æ–º').replace('4', '–≤–∞—à–∏–º –±—Ä–∞–¥–æ–º')}\n"
                        alone = 1
        id = message.reply_to_message.message_id
        msg_info = "\n‚ñ∑ <code>!–ó–∞–≥—Å</code> ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
        if alone == 1:
            msg = msg
            await bot.send_message(message.chat.id, msg, reply_to_message_id=id)
            return
        else:
            msg = "üòû –£ –≤–∞—Å –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!" + msg_info
            await bot.send_message(message.chat.id, msg, reply_to_message_id=id)


    else:
        us = message.from_user
        user = create_user(us.id, us.username, us.first_name)
        msg = "üíç –í–∞—à–∞ —Å–µ–º—å—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:\n\n"
        alone = 0


#–õ–Æ–ë–û–í–ù–ò–ö–ò
        bradstvo = get_wlovers(user[0])
        for tup in bradstvo:
            if tup != 0 and tup != None:
                for brad in tup:
                    user2 = get_user(brad)
                    msg += f"<a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å {str(user2[4]).replace('1', '–≤–∞—à–∏–º –ª—é–±–æ–≤–Ω–∏–∫–æ–º').replace('2', '–≤–∞—à–µ–π –ª—é–±–æ–≤–Ω–∏—Ü–µ–π').replace('0', '–≤–∞—à–∏–º —Å–µ–∫—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º').replace('3', '–≤–∞—à–∏–º —Å–µ–∫—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º').replace('4', '–≤–∞—à–∏–º —Å–µ–∫—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º')}\n"
                    alone = 1
        bradoses = get_wloves(user[0])
        for tup in bradoses:
            if tup != 0 and tup != None:
                for brad in tup:
                    if brad != 0 and brad != None:
                        user2 = get_user(brad)
                        msg += f"–í–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Å—Ç–∞—Ç—å {str(user2[4]).replace('1', '–≤–∞—à–∏–º  –ª—é–±–æ–≤–Ω–∏–∫–æ–º').replace('2', '–≤–∞—à–µ–π –ª—é–±–æ–≤–Ω–∏—Ü–µ–π').replace('0', '–≤–∞—à–∏–º —Å–µ–∫—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º').replace('3', '–≤–∞—à–∏–º —Å–µ–∫—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º').replace('4', '–≤–∞—à–∏–º —Å–µ–∫—Å-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º')}\n"
                        alone = 1


#–°–£–ü–†–£–ì–ò
        bradstvo = get_wmarryers(user[0])
        for tup in bradstvo:
            if tup != 0 and tup != None:
                for brad in tup:
                    user2 = get_user(brad)
                    msg += f"<a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å {str(user2[4]).replace('1', '–≤–∞—à–∏–º –º—É–∂–µ–º').replace('2', '–≤–∞—à–µ–π –∂–µ–Ω–æ–π').replace('0', '–≤–∞—à–∏–º —Å—É–ø—Ä—É–≥–æ–º').replace('3', '–≤–∞—à–∏–º —Å—É–ø—Ä—É–≥–æ–º').replace('4', '–≤–∞—à–∏–º —Å—É–ø—Ä—É–≥–æ–º')}\n"
                    alone = 1
        bradoses = get_wmarrys(user[0])
        for tup in bradoses:
            if tup != 0 and tup != None:
                for brad in tup:
                    if brad != 0 and brad != None:
                        user2 = get_user(brad)
                        msg += f"–í–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Å—Ç–∞—Ç—å {str(user2[4]).replace('1', '–≤–∞—à–∏–º  –º—É–∂–µ–º').replace('2', '–≤–∞—à–µ–π –∂–µ–Ω–æ–π').replace('0', '–≤–∞—à–∏–º —Å—É–ø—Ä—É–≥–æ–º').replace('3', '–≤–∞—à–∏–º —Å—É–ø—Ä—É–≥–æ–º').replace('4', '–≤–∞—à–∏–º —Å—É–ø—Ä—É–≥–æ–º')}\n"
                        alone = 1


#–ë–†–ê–î–´!!!
        bradstvo = get_wsiblers(user[0])
        for tup in bradstvo:
            if tup != 0 and tup != None:
                for brad in tup:
                    user2 = get_user(brad)
                    msg += f"<a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å {str(user2[4]).replace('1', '–≤–∞—à–∏–º –±—Ä–∞—Ç–æ–º').replace('2', '–≤–∞—à–µ–π —Å–µ—Å—Ç—Ä–æ–π').replace('0', '–≤–∞—à–∏–º –±—Ä–∞–¥–æ–º').replace('3', '–≤–∞—à–∏–º –±—Ä–∞–¥–æ–º').replace('4', '–≤–∞—à–∏–º –±—Ä–∞–¥–æ–º')}\n"
                    alone = 1
        bradoses = get_wsibles(user[0])
        for tup in bradoses:
            if tup != 0 and tup != None:
                for brad in tup:
                    if brad != 0 and brad != None:
                        user2 = get_user(brad)
                        msg += f"–í–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Å—Ç–∞—Ç—å {str(user2[4]).replace('1', '–≤–∞—à–∏–º  –±—Ä–∞—Ç–æ–º').replace('2', '–≤–∞—à–µ–π —Å–µ—Å—Ç—Ä–æ–π').replace('0', '–≤–∞—à–∏–º –±—Ä–∞–¥–æ–º').replace('3', '–≤–∞—à–∏–º –±—Ä–∞–¥–æ–º').replace('4', '–≤–∞—à–∏–º –±—Ä–∞–¥–æ–º')}\n"
                        alone = 1
        msg_info = "\n‚ñ∑ <code>!–ó–∞–≥—Å</code> ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
        if alone == 1:
            msg = msg
            await message.reply(msg)
            return
        else:
            msg = "üòû –£ –≤–∞—Å –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!" + msg_info
            await message.reply(msg)


#–¢–í–û–Ø/–ú–û–Ø –°–µ–º—å—è
@dp.message_handler(lambda message: message.text.lower() == "–æ—Ç–Ω–æ—à–µ–Ω–∏—è")
async def my_family(message: types.Message):
    if message.chat.type != 'private':
        warner = get_warner(message.chat.id, message.from_user.id)
        if warner == None:
            warner = [message.chat.id, message.from_user.id, 0, 0, 0]
        if warner[4] != 0:
            return
    
    if message.reply_to_message:
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        us = message.reply_to_message.from_user
        user = create_user(us.id, us.username, us.first_name)
        msg = "üíç –í–∞—à–∞ —Å–µ–º—å—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:\n\n"
        alone = 0


#–õ–Æ–ë–û–í–ù–ò–ö–ò   
        brads = get_love(user[0])
        for tup in brads:
            for brad in tup:
                if brad != user[0]:
                    user2 = get_user(brad)
                    msg += f"{str(user2[4]).replace('1', '–õ—é–±–æ–≤–Ω–∏–∫').replace('2', '–õ—é–±–æ–≤–Ω–∏—Ü–∞').replace('0', '–°–µ–∫—Å-–ø–∞—Ä–Ω—Ç–Ω–µ—Ä').replace('3', '–°–µ–∫—Å-–ø–∞—Ä–Ω—Ç–Ω–µ—Ä').replace('4', '–°–µ–∫—Å-–ø–∞—Ä–Ω—Ç–Ω–µ—Ä')} - <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>\n"
                    alone = 1


#–°–£–ü–†–£–ì–ò
        brads = get_marry(user[0])
        for tup in brads:
            for brad in tup:
                if brad != user[0]:
                    user2 = get_user(brad)
                    msg += f"{str(user2[4]).replace('1', '–ú—É–∂').replace('2', '–ñ–µ–Ω–∞').replace('0', '–°—É–ø—Ä—É–≥').replace('3', '–°—É–ø—Ä—É–≥').replace('4', '–°—É–ø—Ä—É–≥')} - <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>\n"
                    alone = 1


#–ë–†–ê–î–´!!!
        brads = get_sibl(user[0])
        for tup in brads:
            for brad in tup:
                if brad != user[0]:
                    user2 = get_user(brad)
                    msg += f"{str(user2[4]).replace('1', '–ë—Ä–∞—Ç').replace('2', '–°–µ—Å—Ç—Ä–∞').replace('0', '–ë—Ä–∞–¥').replace('3', '–ë—Ä–∞–¥').replace('4', '–ë—Ä–∞–¥')} - <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>\n"
                    alone = 1
        id = message.reply_to_message.message_id
        msg_info = "\n‚ñ∑ <code>!–ó–∞–≥—Å</code> ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
        if alone == 1:
            msg = msg
            await bot.send_message(message.chat.id, msg, reply_to_message_id=id)
            return
        else:
            msg = "üòû –í—ã –æ–¥–∏–Ω–æ–∫–∏!" + msg_info
            await bot.send_message(message.chat.id, msg, reply_to_message_id=id)


    else:
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        us = message.from_user
        user = create_user(us.id, us.username, us.first_name)
        msg = "üíç –í–∞—à–∞ —Å–µ–º—å—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:\n\n"
        alone = 0


#–õ–Æ–ë–û–í–ù–ò–ö–ò
        brads = get_love(user[0])
        if brads != None and brads != 0:
            for tup in brads:
                for brad in tup:
                    if brad != user[0]:
                        user2 = get_user(brad)
                        msg += f"{str(user2[4]).replace('1', '–õ—é–±–æ–≤–Ω–∏–∫').replace('2', '–õ—é–±–æ–≤–Ω–∏—Ü–∞').replace('0', '–°–µ–∫—Å-–ø–∞—Ä–Ω—Ç–Ω–µ—Ä').replace('3', '–°–µ–∫—Å-–ø–∞—Ä–Ω—Ç–Ω–µ—Ä').replace('4', '–°–µ–∫—Å-–ø–∞—Ä–Ω—Ç–Ω–µ—Ä')} - <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>\n"
                        alone = 1


#–°–£–ü–†–£–ì–ò
        brads = get_marry(user[0])
        if brads != None and brads != 0:
            for tup in brads:
                for brad in tup:
                    if brad != user[0]:
                        user2 = get_user(brad)
                        msg += f"{str(user2[4]).replace('1', '–ú—É–∂').replace('2', '–ñ–µ–Ω–∞').replace('0', '–°—É–ø—Ä—É–≥').replace('3', '–°—É–ø—Ä—É–≥').replace('4', '–°—É–ø—Ä—É–≥')} - <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>\n"
                        alone = 1


#–ë–†–ê–î–´!!!
        brads = get_sibl(user[0])
        if brads != None and brads != 0:
            for tup in brads:
                for brad in tup:
                    if brad != user[0]:
                        user2 = get_user(brad)
                        msg += f"{str(user2[4]).replace('1', '–ë—Ä–∞—Ç').replace('2', '–°–µ—Å—Ç—Ä–∞').replace('0', '–ë—Ä–∞–¥').replace('3', '–ë—Ä–∞–¥').replace('4', '–ë—Ä–∞–¥')} - <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>\n"
                        alone = 1
        msg_info = "\n‚ñ∑ <code>!–ó–∞–≥—Å</code> ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
        if alone == 1:
            msg = msg
            await message.reply(msg)
            return
        else:
            msg = "üòû –í—ã –æ–¥–∏–Ω–æ–∫–∏!" + msg_info
            await message.reply(msg)


#–ë—Ä–∞–∫
@dp.message_handler(lambda message: message.text.lower().startswith("–±—Ä–∞–∫ ") or message.text.lower() == "–±—Ä–∞–∫")
async def marry(message: types.Message):
    if message.text.lower() != "–±—Ä–∞–∫":
        stop = await final_text(message)
        if stop != None:
            return
    
        if message.reply_to_message:
            if len(message.text.split()) > 1:
                return
            elif message.reply_to_message.from_user.id in no_rp_list:
                return
        elif message.entities:
            ent = False
            leng = 0
            offs = 0
            for entity in message.entities:
                if entity.type in ["text_mention", "mention"]:
                    ent = True
                    leng = len(message.text[entity.offset + entity.length:])
                    offs = entity.offset
                    break
                else:
                    continue
            if ent == False:
                return
            elif leng > 0:
                return
            elif offs > 6:
                return
        else:
            return
    
    
    
    user2 = await message_user_get(message)
    if user2 == None:
        return
    
    else:
        us = message.from_user
        user = create_user(us.id, us.username, us.first_name)
        if check_marry(user[0], user2[0]) == False:
            if user[0] == user2[0]:
                await message.reply(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.")
                return
            if check_wmarry(user[0], user2[0]):
                await message.reply("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ä–∞–Ω–µ–µ!")
                return
            if check_wmarry(user2[0], user[0]) == False:
                create_wmarry(user[0], user2[0])
                await message.reply(f"‚ù§Ô∏è –ë—Ä–∞–∫ <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω!\n–ß—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
                return
            if check_wmarry(user2[0], user[0]):
                delete_wmarry(user2[0], user[0])
                create_marry(user[0], user2[0])
                if check_love(user[0], user2[0]):
                    delete_love(user[0], user2[0])
                if check_wlove(user[0], user2[0]):
                    delete_wlove(user[0], user2[0])
                if check_wlove(user2[0], user[0]):
                    delete_wlove(user2[0], user[0])
                await message.reply(f"‚ù§Ô∏è –ë—Ä–∞–∫ c <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–ª—é—á–µ–Ω!")
                return
        if check_marry(user[0], user2[0]):
            await message.reply(f"‚ùå –í—ã —É–∂–µ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±—Ä–∞–∫–µ.")
            return

    
#–†–∞–∑–≤–æ–¥
@dp.message_handler(lambda message: message.text.lower().startswith("—Ä–∞–∑–≤–æ–¥ ") or message.text.lower() == "—Ä–∞–∑–≤–æ–¥")
async def marry(message: types.Message):
    if message.text.lower() != "—Ä–∞–∑–≤–æ–¥":
        stop = await final_text(message)
        if stop != None:
            return
        
        if message.reply_to_message:
            if len(message.text.split()) > 1:
                return
            elif message.reply_to_message.from_user.id in no_rp_list:
                return
        elif message.entities:
            ent = False
            leng = 0
            offs = 0
            for entity in message.entities:
                if entity.type in ["text_mention", "mention"]:
                    ent = True
                    leng = len(message.text[entity.offset + entity.length:])
                    offs = entity.offset
                    break
                else:
                    continue
            if ent == False:
                return
            elif leng > 0:
                return
            elif offs > 8:
                return
        else:
            return
    
    user2 = await message_user_get(message)
    if user2 == None:
        return
    else:
        us = message.from_user
        user = create_user(us.id, us.username, us.first_name)
        if check_marry(user[0], user2[0]) == False:
            if check_wmarry(user[0], user2[0]) == False:
                await message.reply(f"‚ùå –ù–µ—á–µ–≥–æ —Ä–∞—Å—Ç–æ—Ä–≥–∞—Ç—å —Å <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>!")
                return
        if check_wmarry(user[0], user2[0]):
            delete_wmarry(user[0], user2[0])
            await message.reply(f"üíî –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç–æ!")
            return
        if check_marry(user[0], user2[0]):
            delete_marry(user[0], user2[0])
            await message.reply(f"üíî –ë—Ä–∞–∫ c <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç –≤–∞–º–∏!")
            return


#–ì–†–ê–ñ–î–ê–ù–°–ö–ò–ô –ë—Ä–∞–∫
@dp.message_handler(lambda message: message.text.lower().startswith("—Å–æ–π—Ç–∏—Å—å ") or message.text.lower() == "—Å–æ–π—Ç–∏—Å—å")
async def marry(message: types.Message):
    if message.text.lower() != "—Å–æ–π—Ç–∏—Å—å":
        stop = await final_text(message)
        if stop != None:
            return
    
        if message.reply_to_message:
            if len(message.text.split()) > 1:
                return
            elif message.reply_to_message.from_user.id in no_rp_list:
                return
        elif message.entities:
            ent = False
            leng = 0
            offs = 0
            for entity in message.entities:
                if entity.type in ["text_mention", "mention"]:
                    ent = True
                    leng = len(message.text[entity.offset + entity.length:])
                    offs = entity.offset
                    break
                else:
                    continue
            if ent == False:
                return
            elif leng > 0:
                return
            elif offs > 9:
                return
        else:
            return
    
    
    user2 = await message_user_get(message)
    if user2 == None:
        return
    else:
        us = message.from_user
        user = create_user(us.id, us.username, us.first_name)
        if user[0] == user2[0]:
            await message.reply(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.")
            return
        if check_love(user[0], user2[0]) == False:
            if check_marry(user[0], user2[0]):
                await message.reply(f"‚ùå –í—ã —É–∂–µ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±—Ä–∞–∫–µ.")
                return
            if check_wlove(user[0], user2[0]):
                await message.reply("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ç–∏–º–∞ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Ä–∞–Ω–µ–µ!")
                return
            if check_wlove(user2[0], user[0]) == False:
                create_wlove(user[0], user2[0])
                await message.reply(f"‚ù§Ô∏è –ò–Ω—Ç–∏–º <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω!\n–ß—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
                return
            if check_wlove(user2[0], user[0]):
                delete_wlove(user2[0], user[0])
                create_love(user[0], user2[0])
                await message.reply(f"‚ù§Ô∏è –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –±—Ä–∞–∫ c <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–ª—é—á–µ–Ω!")
                return
        if check_love(user[0], user2[0]):
            await message.reply(f"‚ùå –í—ã —É–∂–µ –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ.")
            return


#–ì–†–ê–ñ–î–ê–ù–°–ö–ò–ô –†–∞–∑–≤–æ–¥
@dp.message_handler(lambda message: message.text.lower().startswith("–±—Ä–æ—Å–∏—Ç—å ") or message.text.lower() == "–±—Ä–æ—Å–∏—Ç—å")
async def marry(message: types.Message):
    if message.text.lower() != "–±—Ä–æ—Å–∏—Ç—å":
        stop = await final_text(message)
        if stop != None:
            return
        
        if message.reply_to_message:
            if len(message.text.split()) > 1:
                return
            elif message.reply_to_message.from_user.id in no_rp_list:
                return
        elif message.entities:
            ent = False
            leng = 0
            offs = 0
            for entity in message.entities:
                if entity.type in ["text_mention", "mention"]:
                    ent = True
                    leng = len(message.text[entity.offset + entity.length:])
                    offs = entity.offset
                    break
                else:
                    continue
            if ent == False:
                return
            elif leng > 0:
                return
            elif offs > 9:
                return
        else:
            return
    
    
    user2 = await message_user_get(message)
    if user2 == None:
        return
    else:
        us = message.from_user
        user = create_user(us.id, us.username, us.first_name)
        if check_wlove(user[0], user2[0]) == False:
            if check_love(user[0], user2[0]) == False:
                await message.reply(f"‚ùå –ù–µ—á–µ–≥–æ —Ä–∞—Å—Ç–æ—Ä–≥–∞—Ç—å —Å <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>!")
                return
        if check_wlove(user[0], user2[0]):
            delete_wlove(user[0], user2[0])
            await message.reply(f"üíî –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ç–∏–º–∞ <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç–æ!")
        if check_love(user[0], user2[0]):
            delete_love(user[0], user2[0])
            await message.reply(f"üíî –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –±—Ä–∞–∫ c <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a> —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç –≤–∞–º–∏!")
        return


#–ë–†–û–°–ò–¢–¨ –í–°–ï–•
@dp.message_handler(lambda message: message.text.lower() == "–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ—Ö")
async def my_family(message: types.Message):
    if message.chat.type != 'private':
        warner = get_warner(message.chat.id, message.from_user.id)
        if warner == None:
            warner = [message.chat.id, message.from_user.id, 0, 0, 0]
        if warner[4] != 0:
            return
    
    await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
    us = message.from_user
    user = create_user(us.id, us.username, us.first_name)
    delete_all_marry(user[0])
    delete_all_love(user[0])
    delete_all_sibl(user[0])
    delete_all_wmarry(user[0])
    delete_all_wlove(user[0])
    delete_all_wsibl(user[0])
    msg = "–í—ã –≤—Å–µ—Ö –ø–æ—Å–ª–∞–ª–∏!"
    await message.reply(msg)


#–†–ê–ó–†–´–í –°–í–Ø–ó–ï–ô
@dp.message_handler(lambda message: message.text.lower().startswith("–æ—Ç–∫–ª–æ–Ω–∏—Ç—å ") or message.text.lower() == "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å")
async def marry(message: types.Message):
    if message.text.lower() != "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å":
        stop = await final_text(message)
        if stop != None:
            return
        
        if message.reply_to_message:
            if len(message.text.split()) > 1:
                return
            elif message.reply_to_message.from_user.id in no_rp_list:
                return
        elif message.entities:
            ent = False
            leng = 0
            offs = 0
            for entity in message.entities:
                if entity.type in ["text_mention", "mention"]:
                    ent = True
                    leng = len(message.text[entity.offset + entity.length:])
                    offs = entity.offset
                    break
                else:
                    continue
            if ent == False:
                return
            elif leng > 0:
                return
            elif offs > 11:
                return
        else:
            return
    
    
    user2 = await message_user_get(message)
    if user2 == None:
        return
    else:
        us = message.from_user
        user = create_user(us.id, us.username, us.first_name)
        delete_all_marry(user[0])
        delete_all_love(user[0])
        delete_all_sibl(user[0])
        delete_all_wmarry(user[0])
        delete_all_wlove(user[0])
        delete_all_wsibl(user[0])
        delete_wlove(user2[0], user[0])
        delete_wsibl(user2[0], user[0])
        delete_wmarry(user2[0], user[0])
        await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å—á–µ–∑–ª–∏ —Å–æ –≤—Å–µ—Ö —Ä–∞–¥–∞—Ä–æ–≤ <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>!")


#–ë–†–ê–î –¢–´ –ú–ù–ï
@dp.message_handler(lambda message: message.text.lower().startswith("–±—Ä–∞–¥ ") or message.text.lower() == "–±—Ä–∞–¥")
async def marry(message: types.Message):
    if message.text.lower() != "–±—Ä–∞–¥":
        stop = await final_text(message)
        if stop != None:
            return
        
        if message.reply_to_message:
            if len(message.text.split()) > 1:
                return
            elif message.reply_to_message.from_user.id in no_rp_list:
                return
        elif message.entities:
            ent = False
            leng = 0
            offs = 0
            for entity in message.entities:
                if entity.type in ["text_mention", "mention"]:
                    ent = True
                    leng = len(message.text[entity.offset + entity.length:])
                    offs = entity.offset
                    break
                else:
                    continue
            if ent == False:
                return
            elif leng > 0:
                return
            elif offs > 6:
                return
        else:
            return
    
    
    user2 = await message_user_get(message)
    if user2 == None:
        return
    else:
        us = message.from_user
        user = create_user(us.id, us.username, us.first_name)
        if user[0] == user2[0]:
            await message.reply("<b>‚ùå –í—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã —Å–∞–º–∏ —Å–µ–±–µ!</b>")
            return
        if check_wsibl(user[0], user2[0]):
            await message.reply("<b>‚ùå –í—ã —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Ä–∞–Ω–µ–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è!</b>")
            return
        if check_sibl(user[0], user2[0]):
            await message.reply("<b>‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö!</b>")
            return
        if check_wsibl(user2[0], user[0]) == False:
            create_wsibl(user[0], user2[0])
            await message.reply(f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –ø–æ—Ä–æ–¥–Ω–∏—Ç—å—Å—è <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>!</b>\n–ß—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
            return
        if check_wsibl(user2[0], user[0]):
            delete_wsibl(user2[0], user[0])
            create_sibl(user[0], user2[0])
            await message.reply(f"<b>ü´Ç –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Ä–æ–¥–Ω–∏–ª–∏—Å—å —Å <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>!</b>")
            return


#–ù–ï –ë–†–ê–î
@dp.message_handler(lambda message: message.text.lower().startswith("–Ω–µ–±—Ä–∞–¥ ") or message.text.lower() == "–Ω–µ–±—Ä–∞–¥")
async def marry(message: types.Message):
    if message.text.lower() != "–Ω–µ–±—Ä–∞–¥":
        stop = await final_text(message)
        if stop is not None:
            return

        if message.reply_to_message:
            if len(message.text.split()) > 1:
                return
            elif message.reply_to_message.from_user.id in no_rp_list:
                return
        elif message.entities:
            ent = False
            leng = 0
            offs = 0
            for entity in message.entities:
                if entity.type in ["text_mention", "mention"]:
                    ent = True
                    leng = len(message.text[entity.offset + entity.length:])
                    offs = entity.offset
                    break
                else:
                    continue
            if ent == False:
                return
            elif leng > 0:
                return
            elif offs > 8:
                return
        else:
            return
    
    
    user2 = await message_user_get(message)
    if user2 == None:
        return
    else:
        us = message.from_user
        user = create_user(us.id, us.username, us.first_name)
        if check_wsibl(user[0], user2[0]) == False:
            if check_sibl(user[0], user2[0]) == False:
                await message.reply(f"<b>üö´ –ù–µ—á–µ–≥–æ –æ—Ç–∑—ã–≤–∞—Ç—å –∏ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å!</b>")
                return
        if check_wsibl(user[0], user2[0]):
            delete_wsibl(user[0], user2[0])
            await message.reply(f"<b>üö´ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>!</b>")
        if check_sibl(user[0], user2[0]):
            delete_sibl(user[0], user2[0])
            await message.reply(f"<b>üö´ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Ä–≤–∞–ª–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å <a href='tg://user?id={user2[0]}'>{html.escape(user2[2])}</a>!</b>")
