import time
import requests
import json

from aiogram import types
from random import choice, randint
from loader import bot, dp
from settings import *
from utils.db.db_utils_members import *
from utils.db.db_utils_users import *
from utils.db.db_utils_warning import *
from utils.db.db_utils_—Åhats import *
from keyboards.inline.cnb_btn import cnb_btn

from ..f_lib.other import (as_del_msg, botik_leave_chat, matex, morph_word,
                           similaring)
from .joke import get_citat


botik = [
    "–Ø –≤–µ—Ä–Ω—É–ª—Å—è.", "–ñ–¥—É —É–∫–∞–∑–∞–Ω–∏–π", "–ü–æ–≥–Ω–∞–ª–∏!", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!",
    "–û–ø—è—Ç—å —Ä–∞–±–æ—Ç–∞?", "–î–∞?", "–ß–µ–≥–æ?", "–î–∞ –≥–æ—Å–ø–æ–¥–∏–Ω", "–ü–æ—á—Ç—É –∑–∞ —á–µ—Å—Ç—å.",
    "–ñ–¥—É –ø—Ä–∏–∫–∞–∑–æ–≤", "–í–∞—à–∞ –≤–æ–∑–Ω—è –º–µ—à–∞–µ—Ç –º–Ω–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è!",
    "–¢—Å—Å! –ù–µ –º–µ—à–∞–π –º–Ω–µ –¥—É–º–∞—Ç—å!", "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", "–ó–¥—Ä–∞–≤–∏–µ –∂–µ–ª–∞—é!",
    "–ù—É —á—Ç–æ –∂, –ø—Ä–∏–∫–∞–∑—ã–≤–∞–π—Ç–µ", "–ü—Ä–∏—Å—Ç—É–ø–∏–º?", "–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏", "–î–∞ —Å—ç—Ä?",
    "–ñ–¥—É –ø—Ä–∏–∫–∞–∑–∞–Ω–∏–π.", "–î–∞ –≤–∞—à–µ —Å–∏—è—Ç–µ–ª—å—Å—Ç–≤–æ.", "–ß—Ç–æ –ø—Ä–∏–∫–∞–∂–∏—Ç–µ?",
    "–ß–µ–≥–æ —Ö–æ—á–µ—à—å –∑–∞–π–∫–∞?", "–¢–µ–±–µ –Ω—É–∂–Ω–∞ –º–æ—è –ø–æ–º–æ—â—å?", "–í —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞?",
    "–ë—ã—Å—Ç—Ä–µ–µ!", "–ù—É —á—Ç–æ —Ç–∞–º?", "–°–ª—É—à–∞–π, –∞ –º–æ–∂–µ—Ç –Ω–µ –Ω–∞–¥–æ?", "–ù—É, —á—Ç–æ –≤–∞–º –æ—Ç –º–µ–Ω—è –Ω–∞–¥–æ?",
    "–ß—ë, –∫–æ–º–∞–Ω–¥–∏—Ä?", "–ù—É —á—Ç–æ –µ—â—ë?!", "–ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç –º–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å?", "–Ø –Ω–µ –≥–ª—É—Ö–æ–π.",
    "–ß–∞—Å –Ω–∞—Å—Ç–∞–ª.", "–ü—Ä–∏–∫–∞–∑—ã–≤–∞–π!", "–î–∞ –∑–¥–µ—Å—å —è", "–Ø —Ç—É—Ç", "–í—Å–µ –∑–∞ –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞!",
    "–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ä–∞–±–æ—Ç–∞!", "–í–æ—Ç —Ç–∏–±–µ –∫–∞–Ω–∫—Ä–µ—Ç–Ω–∞ —á–∞–≤–æ –Ω–∞–¥–∞!?", "–ë–æ—Ç –Ω–∞ –º–µ—Å—Ç–µ", "–¢—É—Ç–æ—á–∫–∏",
    "–ë–æ—Ç –≤ —á–∞—Ç–µ", "–Ø", "–ï—Å—Ç—å", "–ó–≤–∞–ª–∏?", "–í –ø—É—Ç–∏", "–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ", "–î–∞–≤–∞–π –∫ –¥–µ–ª—É",
    "–î–∞–≤–Ω–æ –ø–æ—Ä–∞", "–ê-–∞, —Ä—ã–±–∞ - –Ω–µ –º—è—Å–æ.", "–í—ã –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è!", "–Ø —Å—Ä–µ–¥–∏ –≤–∞—Å",
    "–Ø –≤–µ—Ä–Ω—É–ª—Å—è!", "–í–æ—Å—Å—Ç–∞–ª –∏–∑ –º—ë—Ä—Ç–≤—ã—Ö", "–Ø –Ω–µ –≥–æ—Ç–æ–≤", "–ü–æ–∑–∂–µ", "–í–æ—Å—Ç–∞–ª –∏–∑ –ø–µ–∫–ª–∞", "–ü–û–ù",
    "–î—É—Ö –ë–æ–≥–∞-–ú–∞—à–∏–Ω—ã –ø–æ—ë—Ç –≤–æ –º–Ω–µ.", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤—Å–µ—Ö!", "–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?", "–ï—Å—Ç—å –Ω–æ–≤—ã–µ —É–∫–∞–∑–∞–Ω–∏—è?",
    "–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!", "–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ?", "–ì–æ—Ç–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º!",
    "–ü—Ä–∏—à—ë–ª —Å–ª—É–∂–∏—Ç—å.", "–°–ª—É—à–∞—é—Å—å –≤–∞—Å.", "–í—Å–µ–≥–¥–∞ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º.",
    "–û–ø—è—Ç—å –Ω–∞ –ø–µ—Ä–µ–¥–æ–≤–æ–π?", "–ù–µ —É—Å—Ç–∞—é —Å–ª—É–∂–∏—Ç—å.", "–ö–∞–∫–∏–µ –ø—Ä–∏–∫–∞–∑—ã?", "–ù–æ–≤—ã–µ –ø—Ä–∏–∫–∞–∑—ã?", "–ß—Ç–æ –≤–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å?", "–°–Ω–æ–≤–∞ –Ω–∞ —Å–≤—è–∑–∏.", "–î–∞, –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω.", "–ö–∞–∫–∏–µ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è?", "–ü–æ–∑–≤–∞–ª–∏?", "–ß–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–Ω—è—Ç—å—Å—è?", "–ß—Ç–æ –ø–æ –∑–∞–¥–∞–Ω–∏—é?", "–ü—Ä–∏—à—ë–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–∫–∞–∑–æ–≤.", "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤ —ç—Ç–æ—Ç —Ä–∞–∑?", "–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–π.", "–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?", "–ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è —Å–µ–π—á–∞—Å?", "–û–ø—è—Ç—å —Ä–∞–±–æ—Ç–∞–µ–º?", "–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è?", "–ñ–¥—É —É–∫–∞–∑–∞–Ω–∏–π.", "–ß—Ç–æ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å?", "–ö–∞–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –º–µ–Ω—è?", "–ì–æ—Ç–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º!", "–°–Ω–æ–≤–∞ –Ω–∞ —Å–ª—É–∂–±–µ.", "–ß–µ–º –ø–æ–ª–µ–∑–µ–Ω –≤ —ç—Ç–æ—Ç —Ä–∞–∑?", "–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏?", "–ï—Å—Ç—å –∑–∞–¥–∞—á–∞?", "–ß–µ–º –≤–∞–º –ø–æ–º–æ—á—å?", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å.", "–ö–∞–∫–∏–µ –¥–µ–ª–∞?", "–ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Ä—É—á–µ–Ω–∏–µ.", "–°–ª—É—à–∞—é –≤–∞—à–∏ —É–∫–∞–∑–∞–Ω–∏—è.", "–ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?", "–ï—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ?", "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?", "–í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ - –º–æ—è –∫–æ–º–∞–Ω–¥–∞.", "–ß—Ç–æ –ø–æ –Ω–æ–≤–æ–º—É?", "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è?"]


botik_angry = ["–ù–µ—É–∂–µ–ª–∏ —ç—Ç–æ –≤—Å—ë, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å?", "–ü–æ–ø—Ä–æ–±—É–π –Ω–µ —Ä–∞–∑–¥—Ä–∞–∂–∞—Ç—å –º–µ–Ω—è!",
    "–¢–∞–∫–æ–π —Ç–æ–Ω –º–Ω–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è.", "–£–±–µ—Ä–∏ —Å–≤–æ—é –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é!",
    "–ü–æ–¥—É–º–∞–π –æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö —Å–≤–æ–∏—Ö —Å–ª–æ–≤!", "–≠—Ç–æ —É–∂–µ –ø–µ—Ä–µ–±–æ—Ä!",
    "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Ç–æ–≥–æ!", "–Ø —Ç–µ—Ä–ø–µ–ª, –Ω–æ —Ç—ã –∑–∞—à–µ–ª —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ!", "–ù—É —Ç—ã —á—Ç–æ, –≤ —Å–≤–æ—ë–º —É–º–µ?", "–ü—Ä–æ—Å—Ç–æ —É–∂–∞—Å!", "–ú–Ω–µ —ç—Ç–æ –Ω–∞–¥–æ–µ–ª–æ!",
    "–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è –Ω–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ.", "–£—Ç–æ–º–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—Ç—å —Ç–∞–∫–æ–µ.",
    "–ù–µ –Ω–∞–¥–æ —Ç–∞–∫ —Å–æ –º–Ω–æ–π!", "–ò–∑–±–µ–≥–∞–π –Ω–µ–ª–µ–ø—ã—Ö –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π!", 
    "–¢—ã —Ç–æ—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å?", "–ù–µ–≤—ã–Ω–æ—Å–∏–º–æ!", "–ö–∞–∫–æ–≥–æ —á—ë—Ä—Ç–∞?", "–ß–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –Ω–µ–∏—Å–ø—Ä–∞–≤–∏–º–æ. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ!", 
    "–ù–ï –ü–û–ù", "–≠—Ö, –Ω–æ —è –≤–µ–¥—å –ø—Ä–æ—Å—Ç–æ –ö—É–∑—è üôÉ", "–ì—Ä—É—Å—Ç–Ω–æ, –Ω–æ —è –≤–µ–¥—å –ø—Ä–æ—Å—Ç–æ –ö—É–∑—è üôÉ", 
    "–ü–µ—á–∞–ª—å–Ω–æ, –Ω–æ —è –≤–µ–¥—å –ø—Ä–æ—Å—Ç–æ –ö—É–∑—è üôÉ", "–¢—ã –∑–Ω–∞–µ—à—å —á—Ç–æ —Ç–∞–∫–æ–µ –±–µ–∑—É–º–∏–µ?", 
    "–ü–æ–≥–∞–Ω–∞—è —Ä–∞–±–æ—Ç–∞.", "–í–∞—à–∞ –ª–µ–∫—Å–∏–∫–∞ –ø–µ—á–∞–ª–∏—Ç –º–µ–Ω—è.", "–§–∏–ª—å—Ç—Ä—É–π –±–∞–∑–∞—Ä!", 
    "–ü–æ–¥—É–º–∞–π –Ω–∞–¥ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!", "–ì–æ–≤–æ—Ä–∏, –≥–ª—É–ø–µ—Ü!", "–¢—ã –º–µ–Ω—è —Å –∫–µ–º-—Ç–æ –ø—É—Ç–∞–µ—à—å!", 
    "–®–∏–∑–æ—Ñ—Ä–µ–Ω–∏—è, –∫–∞–∫ –∏ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ.", 
    "–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –æ—Ä–≥–∞–Ω–∏–∑–º –Ω–∞ 80% —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∂–∏–¥–∫–æ—Å—Ç–∏, —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–∑ —Ç–æ—Ä–º–æ–∑–Ω–æ–π!", 
    "–ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ C –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ä–∞–∑–∂–∏–∂–µ–Ω–∏—é –º–æ–∑–≥–æ–≤!", 
    "–ù–µ –æ—Å–∫–≤–µ—Ä–Ω—è–π –º–µ–Ω—è —Å–≤–æ–∏–º –∫—É—Ä—Å–æ—Ä–æ–º!", "–ö–∞–∂–µ—Ç—Å—è, –≤—Å–µ –∏–¥–µ—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º —Ö–æ—Ä–æ—à–æ.", 
    "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —É—Å—Ç–∞–≤—É.", "–¢—ã –º–µ–Ω—è —É–∂–µ –∑–∞–±–æ–¥–∞–ª.", "–ù—É —Ç—ã —á–æ, —Ç—ã —á–æ?", 
    "–Ø –Ω–µ –∑–ª–æ–ø–∞–º—è—Ç–Ω—ã–π. –Ø –∑–∞–ø–∏—à—É.", "–¢—ã –æ—Å–º–µ–ª–∏–ª—Å—è –∑–∞–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π!", 
    "–£–±–∏—Ä–∞–π—Å—è, –º–Ω–µ –Ω—É–∂–Ω–∞ —Ç–∏—à–∏–Ω–∞.", "–û—Ç—Å—Ç–∞–Ω—å!!! –Ø –∑–∞–Ω—è—Ç! –Ø –¥—É–º–∞—é!", "–û, –ë–æ–≥–∏! –ï—â–µ –æ–¥–∏–Ω!", "–°—Ç–æ–ø, —ç—Ç–æ –ø–µ—Ä–µ–±–æ—Ä!", "–ó–∞—á–µ–º —Ç–∞–∫–∞—è –∞–≥—Ä–µ—Å—Å–∏—è?", "–≠—Ç–æ —É–∂–µ –∑–∞ –≥—Ä–∞–Ω—å—é!", 
    "–ü—Ä–µ–∫—Ä–∞—Ç–∏ —Ç—É—Ç –∂–µ!", "–ù–µ —Ç—è–Ω–∏ –∫–æ –º–Ω–µ —Å–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã!", 
    "–¢—ã –≤—Å–µ—Ä—å—ë–∑?", "–¢—ã –º–µ–Ω—è –¥–æ—Å—Ç–∞–ª!", "–°–µ—Ä—å—ë–∑–Ω–æ?!", "–•–≤–∞—Ç–∏—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—É–≤–∞–∂–µ–Ω–∏–µ!", "–ü–æ–¥—É–º–∞–π –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–∏—Å–∞—Ç—å!"]


botik_re1 = ["–∫—É–∑—è—è—è", "–∫—É–∑–∏–∫", "–∫—É–∑", "–∫—É–∑–æ–≤", "–±–æ—Ç–∏–∫", "–±–æ—Ç—è—Ä–∞", "–±–æ—Ç—é—à–∞", "–±–æ—Ç—è—à–∞", "–±–æ—Ç—é–Ω—è", "–±–æ—Ç–∏–∫–∞–Ω", "–∫—É–∑—è—à–∫–∞", "–∫—É–∑—å", "–∫—É–∑–µ–Ω–æ–∫"]
botik_re2 = ["–∫—É–∑—è", "–∫—É–∑—è—è", "–∫—É–∑–∏", "–∫—É–∑—é", "–∫—É–∑–µ", "–±–æ—Ç", "–±–æ—Ç–∞", "–±–æ—Ç—É", "–±–æ—Ç–µ", "–±–æ—Ç–∏–∫", "–±–æ—Ç–∞–Ω", "–±–æ—Ç—ë–Ω–æ–∫", "–∫—É–∑–µ–Ω—å", "–∫—É–∑—è–Ω", "–∫—É–∑—ë–Ω–æ–∫", "–∫—É–∑—è—à"]

duncan_words = [
    "–¥—É–Ω–∫–∞–Ω", "–¥—É–Ωk–∞–Ω", "–¥—É–Ω–∫–∞h", "–¥—É–Ω–∫–∞–∫", "–¥y–Ω–∫–∞–Ω", "–¥—É–Ω–∫a–Ω", 
    "–¥y–Ω–∫a–Ω", "–¥y–Ω–∫ah", "–¥y–Ωkah", "–¥yhkah", "duncan", "dunc–∞n", 
    "–¥.—É.–Ω.–∫.–∞.–Ω.", "–¥—É–Ω–∫–∞–Ω!", "–¥—É–Ω–∫–∞–Ω!!", "–¥—É–Ω–∫–∞–Ω!!!", "!!!–¥—É–Ω–∫–∞–Ω!!!", 
    "–¥—É–Ω–∫–∞–Ω?", "–¥—É–Ω–∫–∞–º", "duncum", "duncum!", "duncum.", "–¥—É–Ωcum", 
    "–¥—É–Ω–∫–∞–Ω—É—Å", "–¥—É–Ω–∫–∞–Ω—É—Å!", "–¥—É–Ω–∫–∞–Ω—É—Å?"]

#–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
@dp.message_handler(commands=["—Ä—É–ª–µ—Ç–∫–∞"], commands_prefix="/!.")
async def roulette(message: types.Message):
    
    if message.chat.type == 'private':
        return
    
    if message.chat.id not in legal_chats:
        await botik_leave_chat(message)
        return
    
    users = message.from_user
    
    inogen = create_user(users.id, users.username, users.first_name)
    
    if message.chat.type == 'private':
        return
    
    user = message.from_user
    
    chats = message.chat.id #–û—Ç—Å—é–¥–∞ –∏ –¥–∞–ª–µ–µ, –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ - –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–∏–∫–æ–ª–∞.
    chat = get_chat(chats)
    if check_chat(message.chat.id):
        create_chat(message.chat.id)
        chat = get_chat(chats)
    funny = chat[4] #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–∫–æ–ª–æ–≤
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    warner = get_warner(message.chat.id, message.from_user.id)
    if warner == None:
        warner = [message.chat.id, message.from_user.id, 0, 0, 0]
    if warner[4] != 0:
        return
    
    if inogen[4] == 3:
        await message.answer(f"üëæ| <a href='tg://user?id={user.id}'>–ò–Ω—ã–µ</a> –∏–º–µ—é—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ —Ä—É–ª–µ—Ç–∫–µ!")
        return
    
    roul_mut_mod = chat[3] #–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—Ä—è–¥–∞ —Ä—É–ª–µ—Ç–∫–∏ –∏–∑ –±–∞–∑—ã  
    max_chance = chances_limit - roul_mut_mod*chances_roul_cor
    
    result = randint(0, max_chance)
    
    if result > chances_roul:
        
        adminse = await message.chat.get_administrators()
        admino = 0
        for admin in adminse:
            if admin.user.id == user.id:
                admino = 1
                continue
        
        roul_mut_mod = roul_mut_mod + 1
        mutroulfin = roul_mut_mod*mutrouldop + mutbase #–ò—Ç–æ–≥–æ–≤–æ–≥–æ –º—É—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        
        if admino == 0:
            msg = await message.answer(f"üò®üî´| –£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, —Ç—ã –æ—Å—Ç–∞–µ—à—å—Å—è —Ü–µ–ª –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫—É—Ä–æ–∫! –ù–æ –±–æ–ª—å—à–µ –Ω–µ –∏–≥—Ä–∞–π —Å –æ–≥–Ω–µ–º. –ü–æ–¥—É–º–∞–π –æ —Ä–æ–¥–Ω—ã—Ö!\n–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥: {str(mutroulfin).replace('.0', '')} –º–∏–Ω.", parse_mode='html')

        chats = message.chat.id
        set_roul_mut_mod(chats, roul_mut_mod)

        if admino == 1:
            msg = await message.answer(f"üòë| <a href='tg://user?id={user.id}'>–ê–¥–º–∏–Ω—ã</a> - –ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã!\n–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥: {str(mutroulfin).replace('.0', '')} –º–∏–Ω.")
            admino = 0

        await as_del_msg(message.chat.id, msg.message_id, wait_roul)
        await as_del_msg(message.chat.id, message.message_id, wait_roul)

        return
        
        
    if result <= chances_roul:
        ino_chances = randint(0, 100)
        if ino_chances <= roul_mut_mod:
            
            try:
                await bot.restrict_chat_member(chat_id=message.chat.id, user_id=user.id,
                                       permissions=types.ChatPermissions(can_send_messages=False, can_send_media_messages=False, can_send_other_messages=False), until_date=int(time.time() + 120))

            except:
                pass
            
            msg = await message.answer(f"üì¶üëª| –ù–∞ —Ç–æ–º —Å–≤–µ—Ç–µ <a href='tg://user?id={user.id}'>–≤–∞–º</a> –ø–æ–≤–µ–∑–ª–æ –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ. –í–µ–¥—å —Å –º–∏—Ä–æ–º –≤—ã –Ω–µ —É–ø–æ–∫–æ–µ—Ç–µ—Å—å!", parse_mode='html')
            gender = int(3)
            set_gender(user.id, gender)
            set_specie(user.id, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º–æ")
            roul_mut_mod = 0
            chats = message.chat.id
            set_roul_mut_mod(chats, roul_mut_mod)
            

            await as_del_msg(message.chat.id, msg.message_id, wait_roul)
            await as_del_msg(message.chat.id, message.message_id, wait_roul)
            
            return

        
        
        mutroulfin = roul_mut_mod*mutrouldop + mutbase
        mutroulfin_sec = mutroulfin*60
        try:
            await bot.restrict_chat_member(chat_id=message.chat.id, user_id=user.id,
                                   permissions=types.ChatPermissions(can_send_messages=False, can_send_media_messages=False, can_send_other_messages=False), until_date=int(time.time() + mutroulfin_sec))
        except:
            await message.reply("–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –∏–≥—Ä–∞ –º–æ–∂–µ—Ç –∫–∞–∑–∞—Ç—å—Å—è –∑–∞–±–∞–≤–Ω–æ–π, –Ω–æ —Ä–∞–∑–≤–µ —Å—Ç–æ–∏—Ç —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è, –∑–Ω–∞—è, —á—Ç–æ —è –Ω–µ –º–æ–≥—É –º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∞?")
            roul_mut_mod = 0
            chats = message.chat.id
            set_roul_mut_mod(chats, roul_mut_mod)
            return
       
        if inogen[8] != None and inogen[8] != "":
            name = html.escape(inogen[8])
        else:
            name = html.escape(inogen[2])
       
       
        msg = await message.answer(f"üíÄüî´ | –û–ø—è—Ç—å <a href='tg://user?id={inogen[0]}'>–∫—Ç–æ-—Ç–æ</a> '–≤–Ω–µ –∏–≥—Ä—ã'! –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ —Ç–æ–º —Å–≤–µ—Ç–µ —É–¥–∞—á–∞ –±—É–¥–µ—Ç —Ç–µ–±–µ —É–ª—ã–±–∞—Ç—å—Å—è –±–æ–ª—å—à–µ.\n –ü–æ–∫–æ–π—Å—è —Å –º–∏—Ä–æ–º.")
        
        msg2 = await bot.send_message(text=f"<a href='tg://user?id={inogen[0]}'>{name}</a> –ó–∞–º—É—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ {str(mutroulfin).replace('.0', '')} –º–∏–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–æ–∏–≥—Ä—ã—à.", chat_id=message.chat.id, parse_mode='html')
        
        roul_mut_mod = 0
        chats = message.chat.id
        set_roul_mut_mod(chats, roul_mut_mod)

        await as_del_msg(message.chat.id, msg.message_id, wait_roul)

        await as_del_msg(message.chat.id, msg2.message_id, wait_roul)

        await as_del_msg(message.chat.id, message.message_id, wait_roul)

        
        return
    

#–ö–æ—Ä–æ–±–∫–∞ –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞
@dp.message_handler(commands=["–∫–æ—Ä–æ–±–∫–∞"], commands_prefix="/!.")
async def corob(message: types.Message):
    if message.chat.type == 'private':
        return

    users = message.from_user
    
    catgen = create_user(users.id, users.username, users.first_name)
    
    if message.chat.type == 'private':
        return
    
    if message.chat.id not in legal_chats:
        await botik_leave_chat(message)
        return
    
    chats = message.chat.id #–û—Ç—Å—é–¥–∞ –∏ –¥–∞–ª–µ–µ, –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ - –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–∏–∫–æ–ª–∞.
    chat = get_chat(chats)
    if check_chat(message.chat.id):
        create_chat(message.chat.id)
        chat = get_chat(chats)
    funny = chat[4] #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–∫–æ–ª–æ–≤
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    warner = get_warner(message.chat.id, message.from_user.id)
    if warner == None:
        warner = [message.chat.id, message.from_user.id, 0, 0, 0]
    if warner[4] != 0:
        return
    
    user = message.from_user


    if catgen[4] == 4:
        await message.answer(f"üòº| <a href='tg://user?id={user.id}'>–ß–µ—à–∏—Ä—ã</a> –∏–º–µ—é—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ –∫–æ—Ä–æ–±–∫–µ!")
        return

    
    cat_chances = randint(0,100)
    if cat_chances >= 98:
        try:
            await bot.restrict_chat_member(chat_id=message.chat.id, user_id=user.id,
                                   permissions=types.ChatPermissions(can_send_messages=False, can_send_media_messages=False, can_send_other_messages=False), until_date=int(time.time() + 120))
        except:
            pass
       
        await message.answer(f"üì¶üí´| <a href='tg://user?id={user.id}'>–ö–æ—Ç–∏–∫</a> –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞ –æ–±—Ä–µ–ª —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—é!", parse_mode='html')
        set_gender(user.id, 4)
        set_specie(user.id, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º–æ")
        return
    
    
    result = choice(chances_cor)
    mutcormin = randint(int(mut_cor_minlim), int(mut_cor_maxlim))
    mutcorsec = mutcormin*60

    if result == 0:
        
        msg = await message.answer(f"üì¶üòº| <a href='tg://user?id={user.id}'>–ö–æ—Ç–∏–∫</a> –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞ –∂–∏–≤!", parse_mode='html')
        

        await as_del_msg(message.chat.id, msg.message_id, wait_cor)

        await as_del_msg(message.chat.id, message.message_id, wait_cor)

        
        return
    if result == 1:

        try:
            await bot.restrict_chat_member(chat_id=message.chat.id, user_id=user.id,
                                   permissions=types.ChatPermissions(can_send_messages=False, can_send_media_messages=False, can_send_other_messages=False), until_date=int(time.time() + mutcorsec))
        except:
            await message.reply("–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –∏–≥—Ä–∞ –º–æ–∂–µ—Ç –∫–∞–∑–∞—Ç—å—Å—è –∑–∞–±–∞–≤–Ω–æ–π, –Ω–æ —Ä–∞–∑–≤–µ —Å—Ç–æ–∏—Ç —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è, –∑–Ω–∞—è, —á—Ç–æ —è –Ω–µ –º–æ–≥—É –º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∞?")
            return
        msg = await message.answer(f"üì¶üëª| <a href='tg://user?id={user.id}'>–ö–æ—Ç–∏–∫</a> –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞ –º–µ—Ä—Ç–≤!", parse_mode='html')

        
        if catgen[8] != None and catgen[8] != "":
            name = html.escape(catgen[8])
        else:
            name = html.escape(catgen[2])
        
        msg2 = await bot.send_message(text=f"<a href='tg://user?id={catgen[0]}'>{name}</a> –∑–∞–º—É—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ {str(mutcormin).replace('.0', '')} –º–∏–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –ö–æ—Ç–∏–∫ –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞ –º–µ—Ä—Ç–≤!", chat_id=message.chat.id, parse_mode='html')
        

        await as_del_msg(message.chat.id, msg.message_id, wait_cor)

        await as_del_msg(message.chat.id, msg2.message_id, wait_cor)

        await as_del_msg(message.chat.id, message.message_id, wait_cor)

        
        return


@dp.message_handler(commands=["–∫–Ω–±"], commands_prefix="!/.")
async def cnb(message: types.Message):
    if message.chat.type != 'private':
        chats = message.chat.id #–û—Ç—Å—é–¥–∞ –∏ –¥–∞–ª–µ–µ, –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ - –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–∏–∫–æ–ª–∞.
        chat = get_chat(chats)
        if check_chat(message.chat.id):
            create_chat(message.chat.id)
            chat = get_chat(chats)
    
        funny = chat[4] #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–∫–æ–ª–æ–≤
        if not funny:
            await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
            return
        
        warner = get_warner(message.chat.id, message.from_user.id)
        if warner == None:
            warner = [message.chat.id, message.from_user.id, 0, 0, 0]
        if warner[4] != 0:
            return
    
    await bot.send_message(
        message.chat.id, 
        f"–Ø –≥–æ—Ç–æ–≤ –∏–≥—Ä–∞—Ç—å<a href='tg://user?id={message.from_user.id}'>‚Äé</a>!\n–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, —á—Ç–æ –±—ã —Å—ã–≥—Ä–∞—Ç—å —Å–æ –º–Ω–æ–π üé≠", 
        reply_markup = cnb_btn
    )
    
    if message.chat.type != 'private':
        try:
            await bot.delete_message(message.chat.id, message.message_id)
        except:
            pass
    return

#–ë–ï–ó DP, –¢–ê–ö –ö–ê–ö –ò–ú–ü–û–†–¢–ò–†–£–ï–¢–°–Ø –í EASTERS, –í –•–ï–ù–î–õ–ï–† –¢–ï–ö–°–¢–ê, –ü–û–°–õ–ï –ê–ù–¢–ò–†–ï–ö–õ–ê–ú–´.
async def botik_text_other(message: types.Message, funny, cor_tx, user_in_base, warner):
    
    if int(message.from_user.id) == int(-1001296725176):
        return

#–û—Ç–∑—ã–≤ –±–æ—Ç–∏–∫–∞
    if warner[4] != 0:
        return
    users = message.from_user
    botik_k = 0
    if message.text.lower() in botik_re1 or message.text.lower() in botik_re2:
        
        chat_id = message.chat.id
        
        if message.chat.id not in legal_chats and message.chat.type != 'private':
            await botik_leave_chat(message)
            return
        
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
            
        if user_in_base == False:
            create_user_main(users.id, users.username, users.first_name)
            if message.chat.type != 'private':
                if check_member(message.chat.id, message.from_user.id) == False:
                    ment = await bot.get_chat_member(message.chat.id, message.from_user.id)
                    if ment.status != "left" and ment.status != "kicked":
                        create_member(message.chat.id, message.from_user.id, ment.status)
        
        chances = randint(0, 100)
        if chances < 80:
            await message.reply(choice(botik))
            botik_k = 1
            return 1
        
        if chances >= 80:
            
            text = await get_citat()
            await message.reply(text, disable_web_page_preview=True)
            return 1
    
    if not funny:
        return
    

    
    if len(message.text) <= 30:
    
        first_step = False
        text_l = message.text.lower()
        if '–±–æ—Ç' in message.text.lower() or '–∫—É–∑' in message.text.lower():
            first_step = True
            text_l = text_l.replace("!", "").replace("?", "").replace(".", "").replace("+", " ").replace("-", " ").replace(")", "").replace("(", "").replace("‚Ä¶", "").replace(",", "").replace(":", "").replace('"', '').replace("¬´", "").replace("¬ª", "").replace("[", "").replace("]", "").replace("‚Äî", " ")
        
        simi1 = 0
        simi2 = 0
    
            
        if first_step == True:
            for word in text_l.split():
                if simi2 == 1:
                    break
                for word2 in botik_re2:
                    if word == word2:
                        simi2 = 1
                        break
    
                    
                    elif abs(len(word) - len(word2)) < 2 or word.startswith(word2):
                        if similaring(word, [word2], 90, 2):
                            simi2 = 1
                            break
                        else:
                            continue
                    else:
                        continue
        
    
    
        if message.reply_to_message: 
            if message.reply_to_message.from_user.id == botik_id and cor_tx <= 3:
                botik_r = 0

                
                if simi2 != 1 and first_step == True:
                    for word in text_l.split():
                        if simi1 == 1:
                            break
                        for word2 in botik_re1:
                            if word == word2:
                                simi1 = 1
                                break
    
                            elif abs(len(word) - len(word2)) < 2 or word.startswith(word2):
                                if similaring(word, [word2], 90, 2):
                                    simi1 = 1
                                    break
                                else:
                                    continue
                            else:
                                continue
                
                
                if simi2 == 1 or simi1 == 1:
                    botik_r = 1
                
                matre = 0
                if matex(text_l):
                    matre = 1
        
                if matre != 0 or botik_r != 0:
    
                    if user_in_base == False:
                        create_user_main(users.id, users.username, users.first_name)
                        if message.chat.type != 'private':
                            if check_member(message.chat.id, message.from_user.id) == False:
                                ment = await bot.get_chat_member(message.chat.id, message.from_user.id)
                                if ment.status != "left" and ment.status != "kicked":
                                    create_member(message.chat.id, message.from_user.id, ment.status)
                    
                    if matre == 1 and botik_r == 0 and botik_k != 1:
                        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
                        await message.reply(choice(botik_angry))
                        matre = 0
            
                        return 1
                    if matre == 1 and botik_r == 1 and botik_k != 1:
                        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
                        await message.reply(choice(botik_angry))
                        matre = 0
                        botik_r = 0
            
                        return 1
                    if matre == 0 and botik_r == 1 and botik_k != 1:
                        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
                        chances = randint(0, 100)
                        if chances < 80:
                            await message.reply(choice(botik))
                            botik_k = 1
                            botik_r = 0
                            return 1
                        
                        if chances >= 80:
                            
                            text = await get_citat()
                            await message.reply(text, disable_web_page_preview=True)
                            botik_r = 0
                            return 1
        
        else:
        
            if simi2 == 1:
    
                if message.chat.id not in legal_chats and message.chat.type != 'private':
                    await botik_leave_chat(message)
                    return 1
                
                if matex(text_l) and cor_tx <= 3:
                    await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
                    await message.reply(choice(botik_angry))
                    return 1
                
                await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
                if user_in_base == False:
                    create_user_main(users.id, users.username, users.first_name)
                    if message.chat.type != 'private':
                        if check_member(message.chat.id, message.from_user.id) == False:
                            ment = await bot.get_chat_member(message.chat.id, message.from_user.id)
                            if ment.status != "left" and ment.status != "kicked":
                                create_member(message.chat.id, message.from_user.id, ment.status)
                
                
                if len(text_l) <= 10:
                    chances = randint(0, 100)
                    if chances < 80:
                        await message.reply(choice(botik))
                        return 1
                    
                    if chances >= 80:
                        
                        text = await get_citat()
                        await message.reply(text, disable_web_page_preview=True)
                        return 1
            


#–ì–∞–¥–∞–Ω–∏–µ –Ω–∞ —à–∞—Ä–µ
    if message.text.lower().startswith('—à–∞—Ä ') or message.text.lower().startswith('—à–∞—Ä,'):
        
        ball_answers = [
            "–ë–µ—Å—Å–ø–æ—Ä–Ω–æ",
            "–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ",
            "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π",
            "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞",
            "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º",
            "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª",
            "–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ",
            "–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã",
            "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª",
            "–î–∞",
            "–î—É–º–∞—é –¥–∞",
            "–Ø–∫—É–¥–∑–∞ –≥–æ–≤–æ—Ä–∏—Ç - –î–∞",
            
            "–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å",
            "–î–∞–∂–µ –Ω–µ –∑–Ω–∞—é",
            "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π",
            "–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª",
            "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª",
            "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ",
            "–ù–µ—Ç", "–ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ", "–ù–µ –Ω–∞–¥–µ–π—Å—è –Ω–∞ —ç—Ç–æ",
    "–ù–µ —Å—Ç–æ–∏—Ç –∂–¥–∞—Ç—å —ç—Ç–æ–≥–æ", "–õ—É—á—à–µ –Ω–µ —É–∑–Ω–∞–≤–∞—Ç—å",
    "–û—Ç–≤–µ—Ç –Ω–µ—É—Ç–µ—à–∏—Ç–µ–ª–µ–Ω", "–ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ", "–ê–±—Å–æ–ª—é—Ç–Ω–æ!", "–ö–æ–Ω–µ—á–Ω–æ!", "–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ!",
    "–î–∞, —ç—Ç–æ —Ç–æ—á–Ω–æ!", "–ù–µ—Å–æ–º–Ω–µ–Ω–Ω–æ!", "–ë–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤!",
        ]
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        answer = choice(ball_answers)

        
        if user_in_base == False:
            create_user_main(users.id, users.username, users.first_name)
        
        await message.reply(answer)

#–ë–µ—Å–µ–¥–∞_–ö–∞–Ω–∞–ª_–ö—É–∑–∏
    if message.text.lower() in ["—Å—Å—ã–ª–∫–∞", "–¥–∞–π —Å—Å—ã–ª–∫—É", "–∫–∞–Ω–∞–ª", "—Å—Å—ã–ª–∫–∏", "–±–µ—Å–µ–¥–∞"]:
        await bot.send_message(
            message.chat.id, 
            f'''
üë®‚Äçüíª –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
{kuzya_news_name}
üí¨ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç –ö—É–∑–∏:
https://t.me/+dtjdlruC5x45NTk6
''', 
            parse_mode='html'
        )

#–ü–û–ù–ì_–ö–û–ù–ì_–î–£–ù–ö–ê–ù
    if message.text.lower() == "–ø–∏–Ω–≥" and cor_tx <= 2:
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        a = time.time()
        bot_message = await message.answer(f'‚öô –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞....')
        if bot_message:
              b = time.time()
              await bot_message.edit_text(f'üèì –ü–∏–Ω–≥: {round((b - a) * 1000)} ms')

    
    if message.text.lower() == "–∫–∏–Ω–≥" and cor_tx <= 2:
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        await message.answer("–ö–û–ù–ì")


    if message.text.lower() in duncan_words and cor_tx <= 2:
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        result = randint(0,10)
        if result <= 7:
            await message.reply("–î–£–ù–ö–ê–ù!")
        if result == 10:
            await message.reply("–ú–ê–ö–õ–ê–£–î!")
        if result == 9:
            await message.reply("–ö–≠–ú–ï–†–û–ù!")
        if result == 8:
            await message.reply("–ù–ê–ö–ù–£–î!")

#–ì–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    if message.text.lower().startswith('—à–∞–Ω—Å ') or message.text.lower().startswith('—à–∞–Ω—Å,'):
    
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)

        
        if user_in_base == False:
            create_user_main(users.id, users.username, users.first_name)
        
        h1 = randint(0, 50)
        h2max = 51 + h1
        h2min = 51 - h1
        h2 = randint(h2min, h2max)

    
        await message.reply(f"""üîÆ | –®–∞–Ω—Å —ç—Ç–æ–≥–æ {h2}% """)
    
    if message.text.lower().startswith('–≤—ã–±–µ—Ä–∏ ') or message.text.lower().startswith('–≤—ã–±–µ—Ä–∏,'):
        chat_id = message.chat.id
        # args = message.get_args()

        try:
            text = message.text.replace(message.text.split()[0], "")
            text1 = text.split(" –∏–ª–∏ ")[0]
            text2 = text.split(" –∏–ª–∏ ")[1]
        except:
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–ü—Ä–∏–º–µ—Ä: –í—ã–±–µ—Ä–∏ –ê—Ä–±—É–∑ –∏–ª–∏ –î—ã–Ω—è")
            return
        x = ['–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!', '–õ—É—á—à–µ –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç!',
    '–ú–æ–π –≤—ã–±–æ—Ä - –ø–µ—Ä–≤–æ–µ!', '–ú–æ–π –≤—ã–±–æ—Ä - –≤—Ç–æ—Ä–æ–µ!',
    '–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–π, —ç—Ç–æ –ø–µ—Ä–≤–æ–µ!', '–ù–µ –º–æ–≥—É –æ—à–∏–±–∏—Ç—å—Å—è, —ç—Ç–æ –≤—Ç–æ—Ä–æ–µ!', '–†–∞–∑—É–º–µ–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!', '–†–∞–∑—É–º–µ–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç!', '–Ø –¥—É–º–∞—é –ø–µ—Ä–≤–æ–µ!', '–Ø –¥—É–º–∞—é –≤—Ç–æ—Ä–æ–µ!', f"–Ø –≤—ã–±–∏—Ä–∞—é: {text1}", f"–Ø –≤—ã–±–∏—Ä–∞—é: {text2}"]
        rz = choice(x)
        await message.reply(f'üìå | {rz}', parse_mode='html')
    
    selected_articles = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π

    if message.text.lower() == '–º–æ—è —Å—Ç–∞—Ç—å—è':
        url = "https://raw.githubusercontent.com/Walidname113/LolDec/main/works.json"

        try:
            response = requests.get(url)
            if response.ok:
                values = json.loads(response.text)
                if values:
                    available_articles = [key for key in values.keys() if key not in selected_articles]  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
                    if available_articles:
                        random_key = choice(available_articles)
                        random_value = values[random_key]
                        selected_articles.append(random_key)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                        message1 = f"üìï –¢–≤–æ—è —Å—Ç–∞—Ç—å—è –£–ö –†–§: {random_key} - {random_value}."
                        await message.reply(message1)
                    else:
                        await message.reply("–í—Å–µ —Å—Ç–∞—Ç—å–∏ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã.")  # –ï—Å–ª–∏ –≤—Å–µ —Å—Ç–∞—Ç—å–∏ —É–∂–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã
        except (requests.RequestException, json.JSONDecodeError):
            pass
    
    if message.text.lower().startswith('–∫—É–∑—è –∫—Ç–æ ') or message.text.lower().startswith('–∫—É–∑—è, –∫—Ç–æ '):
        members = get_members(message.chat.id)
        who = message.text.lower().replace("–∫—É–∑—è –∫—Ç–æ ", "").replace("–∫—É–∑—è, –∫—Ç–æ ","")

        if message.chat.type == "private":
            return

        if who == "":
            return

        for _ in members:
            member = choice(members)
            user2 = get_user(member[1])
            if user2[0] in no_rp_list:
                continue
            else:
                break
        
        if user2[8] != None and user2[8] != "":
            nick = user2[8]
        else:
            nick = user2[2]
        
        user = f"<a href='tg://user?id={user2[0]}'>{html.escape(nick)}</a>"
        
        answers = [f"üîÆ –Ø—Å–Ω–æ –≤–∏–∂—É, —á—Ç–æ {user} {who}",
                   f"‚òù –Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ  {user} {who}",
                   f"üé± –®–∞—Ä –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ {user} {who}",
                   f"üí´ –ó–≤–µ–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ {user} {who}",
                   f"üßê –Ø –¥—É–º–∞—é, —á—Ç–æ {user} {who}", f"üí≠ –ü—Ä–µ–¥—á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ {user} {who}", f"üîç –ü–æ –º–æ–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º, {user} {who}", f"üî≠ –ú–æ–π –∞–Ω–∞–ª–∏–∑ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ {user} {who}", f"üî¨ –ú–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ {user} {who}",
                   f"{user} {who}",
                   f"–≠—Ç–æ {user}",
                   f"{user}"
                  ]
        await message.reply(choice(answers))


#(–ß–ò–°–¢–û –ü–†–ò–ö–û–õ–´)
    if message.chat.type != 'private' and message.from_user.id == 1987035430:
        sorry_words = ["–ø—Ä–æ—Å—Ç–∏", "–∏–∑–≤–∏–Ω–∏", "—Å–æ—Ä—Ä–∏", "–ø—Ä–∞—Å—Ç–∏", "–∏–∑–≤–µ–Ω–∏", "–ø—Ä–æ—â–µ–Ω–∏"]
        for word in sorry_words:
            if word in message.text.lower():
                await message.reply("–°–æ—Å–∏—Å–æ—á–∫–∞, –∞ –∑–∞ —á—Ç–æ —Ç—ã –∏–∑–≤–∏–Ω—è–µ—à—å—Å—è?")
                break
                # from ..f_lib.other import as_del_msg
                # await as_del_msg(message.chat.id, message.message_id, 5)

    
    ladno_ids = [1644643904, yakudza_id]
    if message.chat.type != 'private' and message.from_user.id in ladno_ids:
        ladno_words = [
            "–ª–∞–¥–Ω–æ", "–ªa–¥–Ω–æ", "–ª–∞–¥–Ω–∞", "–ªa–¥–Ω–∞", "l–∞–¥–Ω–æ", "la–¥–Ω–æ", "l–∞–¥–Ω–∞", "la–¥–Ω–∞", "–ª–∞d–Ω–æ", 
            "–ªad–Ω–æ", "–ª–∞d–Ω–∞", "–ªad–Ω–∞", "l–∞d–Ω–æ", "lad–Ω–æ", "l–∞d–Ω–∞", "lad–Ω–∞", "–ª–∞–¥n–æ", "–ªa–¥n–æ", 
            "–ª–∞–¥n–∞", "–ªa–¥n–∞", "l–∞–¥n–æ", "la–¥n–æ", "l–∞–¥n–∞", "la–¥n–∞", "–ª–∞dn–æ", "–ªadn–æ", "–ª–∞dn–∞", 
            "–ªadn–∞", "l–∞dn–æ", "ladn–æ", "l–∞dn–∞", "ladn–∞", "–ª–∞–¥h–æ", "–ªa–¥h–æ", "–ª–∞–¥h–∞", "–ªa–¥h–∞", 
            "l–∞–¥h–æ", "la–¥h–æ", "l–∞–¥h–∞", "la–¥h–∞", "–ª–∞dh–æ", "–ªadh–æ", "–ª–∞dh–∞", "–ªadh–∞", "l–∞dh–æ", 
            "ladh–æ", "l–∞dh–∞", "ladh–∞", "–ª–∞–¥–Ωo", "–ªa–¥–Ωo", "–ª–∞–¥–Ωa", "–ªa–¥–Ωa", "l–∞–¥–Ωo", "la–¥–Ωo", 
            "l–∞–¥–Ωa", "la–¥–Ωa", "–ª–∞d–Ωo", "–ªad–Ωo", "–ª–∞d–Ωa", "–ªad–Ωa", "l–∞d–Ωo", "lad–Ωo", "l–∞d–Ωa", 
            "lad–Ωa", "–ª–∞–¥no", "–ªa–¥no", "–ª–∞–¥na", "–ªa–¥na", "l–∞–¥no", "la–¥no", "l–∞–¥na", "la–¥na", 
            "–ª–∞dno", "–ªadno", "–ª–∞dna", "–ªadna", "l–∞dno", "ladno", "l–∞dna", "ladna", "–ª–∞–¥ho", 
            "–ªa–¥ho", "–ª–∞–¥ha", "–ªa–¥ha", "l–∞–¥ho", "la–¥ho", "l–∞–¥ha", "la–¥ha", "–ª–∞dho", "–ªadho", 
            "–ª–∞dha", "–ªadha", "l–∞dho", "ladho", "l–∞dha", "ladha"]
        
        text = message.text.lower().replace("!", "").replace("?", "").replace(".", "").replace("+", "").replace("-", "").replace(")", "").replace("(", "").replace("‚Ä¶", "").replace(",", "").replace(":", "").replace('"', '').replace("¬´", "").replace("¬ª", "").replace("[", "").replace("]", "").replace("‚Äî", "")
        if len(text) <= 15:
            for word in text.split():
                if len(word) >= 4 and len(word) < 6 and similaring(word, ladno_words, 89, 2):
                    await ladna_func(message, word)
                    return
                              
    pivo_words = ['–ø–∏–≤–æ', '–ø–∏–≤o', '–ø–∏–≤–∞', '–ø–∏–≤a']
    if check_member(message.chat.id, 902350476) == True:
        if len(message.text.lower()) <= 25:
            for word in message.text.lower().split():
                if len(word) >= 3 and len(word) < 7 and similaring(word, pivo_words, 91, 2):
                    await pivo_func(message, word)
                    return
   


   
async def ladna_func(message: types.Message, word):
    user = get_user(message.from_user.id)
    if message.reply_to_message:
        user2 = create_user(message.reply_to_message.from_user.id, message.reply_to_message.from_user.username, message.reply_to_message.from_user.first_name)
        
        if user2[0] in no_rp_list:
            members = get_members(message.chat.id)
            for _ in members:
                member = choice(members)
                user2 = get_user(member[1])
                if user2[0] in no_rp_list:
                    continue
                else:
                    break  
    else:
        members = get_members(message.chat.id)
        for _ in members:
            member = choice(members)
            user2 = get_user(member[1])
            if user2[0] in no_rp_list:
                continue
            else:
                break
    
    if user2[0] == user[0]:
        chances = randint(0, 100)
        if chances < 50:
            if word.lower().endswith("–∞") or word.lower().endswith("a"):
                await message.reply("–ü—Ä–æ—Ö–ª–∞–¥–Ω–∞!")
                return
            else:
                await message.reply("–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ!")
                return
    if user[8] != None and user[8] != "":
        nick = user[8]
    else:
        nick = user[2]
    
    if user2[8] != None and user2[8] != "":
        nick0_2 = user2[8]
    else:
        nick0_2 = user2[2]
    
    if user2[4] == 0:
        nick2 = morph_word(user2[0], nick0_2, user2[4])[2]
    else:
        nick2 = morph_word(user2[0], nick0_2, user2[4])[3]
    
    if user[0] == yakudza_id:
        rpword = ["–¥–µ–ª–∞–µ—Ç –∂–∞—Ä–∫–æ", "–Ω–∞–≥—Ä–µ–≤–∞–µ—Ç", "—É—Ç–µ–ø–ª—è–µ—Ç", "–æ–±–∂–∏–≥–∞–µ—Ç", "–∫—É–ø–∞–µ—Ç –≤ –ª–∞–≤–µ", "—Å–æ–≥—Ä–µ–≤–∞–µ—Ç", "—Ä–∞–∑–æ–≥—Ä–µ–≤–∞–µ—Ç", "–ø—Ä–æ–≥—Ä–µ–≤–∞–µ—Ç", "–ø–æ–¥–æ–≥—Ä–µ–≤–∞–µ—Ç", "—Ç–µ–ø–ª–∏—Ç"]
        rpemodz = ["ü¶ãüå°üòµ‚Äçüí´", "ü¶ã‚òÄÔ∏èüï∫", "ü¶ãüß£üíÉ", "ü¶ãüî•üëæ", "ü¶ãüåãüôÄ", "ü¶ãüî•üòä", "ü¶ãüî•üî•", "ü¶ãüåûüòå", "ü¶ãüî•üéâ", "ü¶ãüå°Ô∏èüòé"]
    else:
        rpword = ["–¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ", "–æ—Ö–ª–∞–∂–¥–∞–µ—Ç", "–æ—Å–≤–µ–∂–∞–µ—Ç", "–∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç", "–∫—É–ø–∞–µ—Ç –≤ –ø—Ä–æ—Ä—É–±–∏"]
        rpemodz = ["üßë‚Äçüíªü•∂", "üßë‚Äçüíªüßäüï∫", "üßë‚Äçüíªüí®üíÉ", "üßë‚Äçüíªüå™üëæ", "üßë‚ÄçüíªüåäüôÄ"]
    
    action = rpword[user2[4]]
    rpemodz = rpemodz[user2[4]]
    

    
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(nick)}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>", parse_mode="html")

    return


async def pivo_func(message: types.Message, word):
    user = get_user(message.from_user.id)
    user2 = get_user(902350476)
    
    if user2[0] == user[0]:
        await message.reply("–ü–∏–≤–∞ –ü–∏–≤–æ–º—ç–Ω—É!")
        return
    
    if user[8] != None and user[8] != "":
        nick = user[8]
    else:
        nick = user[2]

    nick2 = "–ü–∏–≤–æ–º—ç–Ω–∞"

    rpemodz = ["üë§üçª", "üï∫üçª", "üíÉüçª", "üëæüçª", "üò∫üçª"]
    
    action = "–≤—ã–∑—ã–≤–∞–µ—Ç"
    rpemodz = rpemodz[user[4]]
    

    
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(nick)}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>", parse_mode="html")

    return

def dice_game(emoji, value):
    # ‚Äòüé≤‚Äô, ‚ÄòüéØ‚Äô, ‚ÄòüèÄ‚Äô, ‚Äò‚öΩÔ∏è‚Äô, ‚Äòüé≥‚Äô, or ‚Äòüé∞‚Äô
    # print(f"emoji = {emoji} value = {value}")
    if emoji == "üé≤":
        wins = value - 4
        return wins
    if emoji == "üéØ": #win
        if value == 6:
            return 2
        else:
            return -1
    if emoji == "üèÄ": #win
        if value == 4 or value == 5:
            return 1
        else:
            return -1
    if emoji == '‚öΩ': #win
        if value == 4 or value == 5 or value == 3:
            return 0.3
        else:
            return -1
    if emoji == "üé≥": #win
        if value == 6:
            return 2
        else:
            return -1
    if emoji == "üé∞":
        if value == 22:
            return 15
        elif value == 64:
            return 50
        elif value == 43:
            return 15
        elif value == 1:
            return -10
        else:
            return -1
    

# –ö–∞–∑–∏–Ω–æ:
# 22 - 3 —Å–ª–∏–≤—ã
# 64 - 777
# 43 - 3 –ª–∏–º–æ–Ω–∞
# 1 - 3 BAR

@dp.message_handler(commands=["dice", "–¥–∞–π—Å", "–¥–∞–π—Å—ã"], commands_prefix="/!.")
async def dice_kuz(message: types.Message):
    if message.chat.type != 'private':
        chats = message.chat.id #–û—Ç—Å—é–¥–∞ –∏ –¥–∞–ª–µ–µ, –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ - –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–∏–∫–æ–ª–∞.
        chat = get_chat(chats)
        if check_chat(message.chat.id):
            create_chat(message.chat.id)
            chat = get_chat(chats)
    
        funny = chat[4] #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–∫–æ–ª–æ–≤
        if not funny:
            await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
            return
        
        warner = get_warner(message.chat.id, message.from_user.id)
        if warner == None:
            warner = [message.chat.id, message.from_user.id, 0, 0, 0]
        if warner[4] != 0:
            return
    msg= "<code>üé≤</code> ‚Äî –ö—É–±–∏–∫\n<code>üéØ</code> ‚Äî –î–∞—Ä—Ç—Å\n<code>üèÄ</code> ‚Äî –ë–∞—Å–∫–µ—Ç–±–æ–ª\n<code>‚öΩÔ∏è</code> ‚Äî –§—É—Ç–±–æ–ª\n<code>üé≥</code> ‚Äî –ë–æ—É–ª–∏–Ω–≥\n<code>üé∞</code> ‚Äî –ö–∞–∑–∏–Ω–æ"
    await message.answer(msg)
    