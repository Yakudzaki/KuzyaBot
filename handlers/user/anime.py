from loader import dp, bot
import requests
from aiogram import types
from loguru import logger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.db.db_utils_—Åhats import *
from utils.db.db_utils_warning import *

anime_query = """
           query ($id: Int,$search: String) {
              Media (id: $id, type: ANIME,search: $search) {
                id
                title {
                  romaji
                  english
                  native
                }
                description (asHtml: false)
                startDate{
                    year
                  }
                  episodes
                  season
                  type
                  format
                  status
                  duration
                  siteUrl
                  studios{
                      nodes{
                           name
                      }
                  }
                  trailer{
                       id
                       site
                       thumbnail
                  }
                  averageScore
                  genres
                  bannerImage
              }
            }
        """
        
anime_url = "https://graphql.anilist.co"

@dp.message_handler(commands=["anime", "–∞–Ω–∏–º–µ", "–∞–Ω–∏–º—ç"], commands_prefix="/!.")
async def anime_info(message: types.Message): 
    chats = message.chat.id #–û—Ç—Å—é–¥–∞ –∏ –¥–∞–ª–µ–µ, –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ - –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–∏–∫–æ–ª–∞.
    chat = get_chat(chats)

    if check_chat(message.chat.id):
        create_chat(message.chat.id)
        chat = get_chat(chats)
    funny = chat[4] #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–∫–æ–ª–æ–≤
    if funny == 0:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    if message.chat.type != 'private':
        warner = get_warner(message.chat.id, message.from_user.id)
        if warner == None:
            warner = [message.chat.id, message.from_user.id, 0, 0, 0]
        if warner[4] != 0:
            return
    
    anime = message.text
    find = ' '.join(anime.split(' ')[1:])
    
    variables = {"search": find}
    status_code = requests.post(anime_url, json={'query': anime_query,'variables': variables}).status_code
    
    if status_code == 200:
        anime_data = requests.post(anime_url, json={'query': anime_query,'variables': variables}).json()['data'].get('Media', None)
        anime_site = anime_data.get('siteUrl')
        image = anime_site.replace('anilist.co/anime/', 'img.anili.st/media/')
        anime_keyboard = InlineKeyboardMarkup()
        more_button = InlineKeyboardButton(text="–ë–æ–ª—å—à–µ", url=anime_site)
        anime_keyboard.insert(more_button)
        
        type_en = anime_data['type']
        status_en = anime_data['status']
        description_en = str(anime_data['description']).replace('<br>', ' ')

        
        if anime_data['title']['english']:
            title = anime_data['title']['english']
        else:
            title = anime_data['title']['romaji']
        if anime_data['title']['native']:
            native_title = anime_data['title']['native']
        else:
            native_title = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ ;)'
            
        await message.answer(f"{title} <code>({native_title})</code>\n"
                             f"–¢–∏–ø: <b>{type_en}</b>\n"
                             f"–û—Ü–µ–Ω–∫–∞: <b>{anime_data['averageScore']}</b>\n"
                             f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{anime_data['duration']}</b>\n"
                             f"–§–æ—Ä–º–∞—Ç: <b>{anime_data['format']}</b>\n"
                             f"–ñ–∞–Ω—Ä—ã: <code>{' '.join(anime_data['genres'])}</code>\n"
                             f"–°—Ç–∞—Ç—É—Å: <b>{status_en})</b>\n\n"
                             f"–û–ø–∏—Å–∞–Ω–∏–µ: <i>{description_en}</i>"
                             f"<a href='{image}'>&#xad</a>", reply_markup=anime_keyboard)
    else:
        logger.info(f"–∞–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ --> –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {status_code} \n")
        await message.answer("<code>–ù–µ –Ω–∞–π–¥–µ–Ω–æ üò≠</code>")