import html
import re
from random import choice, randint

from aiogram import types

from loader import bot, dp
from settings import no_rp_list
from utils.db.db_utils_members import *
from utils.db.db_utils_users import *
from utils.db.db_utils_warning import *
from utils.db.db_utils_—Åhats import *
from utils.db.relations.db_utils_moniker import *

from ..f_lib.other import eight_years, morph_word, rp_check
from ..f_lib.pyrogram_f import pyro_get_chat_member


@dp.message_handler(commands=["–º–∞–Ω—É–∞–ª"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp_manual(message: types.Message):
    if message.chat.type != 'private':
        warner = get_warner(message.chat.id, message.from_user.id)
        if warner == None:
            warner = [message.chat.id, message.from_user.id, 0, 0, 0]
        if warner[4] != 0:
            return
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    endrp = " —Ä–ø"
    if endrp in message.text.lower():
        create_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
        nick = html.escape(message.from_user.first_name)
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        await message.reply(f"<a href='tg://user?id={message.from_user.id}'>{nick}</a>, –≤–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –†–ü –∫–æ–º–∞–Ω–¥:\n \
        \n\n–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤–≤–æ–¥—è—Ç—Å—è –ø—Ä–æ—Å—Ç–æ —Å [/!.] (–∏–ª–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞) –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: [.–æ–±–Ω—è—Ç—å]\
        \n–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∏—Ö –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ <code>.—Å–ø–∏—Å–æ–∫ —Ä–ø</code>) –ø–∏—Å–∞—Ç—å –ª–∏–±–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –ø–æ—Å—Ç–∞–≤–∏–≤ @—é–∑–µ—Ä–Ω–µ–π–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, —Å—Ç—Ä–æ–≥–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ.\
        \n–ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã –≤–≤–µ–¥–µ—Ç–µ –∫–∞–∫–æ–π-–ª–∏–±–æ —Ç–µ–∫—Å—Ç –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ, —Ç–æ –æ–Ω –æ–∫–∞–∂–µ—Ç—Å—è –≤ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–ø–ª–∏–∫–µ.\
        \n–ï—Å–ª–∏ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –≥–¥–µ-–ª–∏–±–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ <code>—Ä–∞–Ω–¥–æ–º</code>, —Ç–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å, –æ–Ω–∞ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.\
        \n\n–í —Å–≤–æ–±–æ–¥–Ω–æ–π –†–ü, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞–∫ % –∏ –ø–æ—Å–ª–µ –Ω–µ–≥–æ –≤–≤–µ—Å—Ç–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –†–ü-–∫–æ–º–∞–Ω–¥—ã. –í–≤–æ–¥–∏—Ç—å —ç–º–æ–¥–∑–∏ –Ω—É–∂–Ω–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ.\
        \n–ù–∞–ø–∏—Å–∞–≤ —Ñ—Ä–∞–∑—É –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –†–ü, –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ –µ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–ø–ª–∏–∫–æ–π, –∫–∞–∫ –∏ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –†–ü.\
        \n–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –ø–∏—à–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –†–ü —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ @—é–∑–µ—Ä–Ω–µ–π–º, —Ç–æ —é–∑–µ—Ä–Ω–µ–π–º —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω—É–∂–Ω–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –∏ –≤–≤–æ–¥–∏—Ç—å —ç–º–æ–¥–∑–∏ - –ø–æ—Å–ª–µ –Ω–µ–≥–æ.\
        \n\n–ï—Å–ª–∏ –≤–∞–º –æ—Ç–≤–µ—Ç–∏–ª–æ, —á—Ç–æ ¬´–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞¬ª, —Ç–æ –Ω–∞–π–¥–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —É –±–æ—Ç–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å. –í–∏–¥–∏–º–æ, –æ–Ω –ª–∏–±–æ –Ω–æ–≤–∏—á–æ–∫, –ª–∏–±–æ —É—Å–ø–µ–ª —Å–º–µ–Ω–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–æ —Å–≤–æ–π @—é–∑–µ—Ä–Ω–µ–π–º.\
        \n\n–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\
        \n‚Äî –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\
        \n<code>.–æ–±–Ω—è—Ç—å\
        \n–•–∞—Ä–æ—à.</code>\
        \n\n‚Äî–ù–µ –æ—Ç–≤–µ—á–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç:\
        \n<code>.–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —á–∞–π @—é–∑–µ—Ä–Ω–µ–π–º\
        \n–û–Ω –≤–∫—É—Å–Ω—ã–π!</code>\
        \n\n–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ñ–æ—Ä–º—ã:\
        \n‚Äî –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\
        \n<code>.—Ä–ø –æ–±–Ω—è–ª %ü§ó\
        \n–•–∞—Ä–æ—à.</code>\
        \n\n‚Äî–ù–µ –æ—Ç–≤–µ—á–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç:\
        \n<code>.—Ä–ø –ø—Ä–∏–≥–ª–∞—Å–∏–ª –Ω–∞ —á–∞–π @—é–∑–µ—Ä–Ω–µ–π–º %ü§åü´ñ\
        \n–û–Ω –≤–∫—É—Å–Ω—ã–π!</code>\
        \n\n‚Äî‚Äî\n–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å —ç–º–æ–¥–∑–∏, —Ä–µ–ø–ª–∏–∫—É –∏ –¥–µ–π—Å—Ç–≤–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞ –†–ü. –û–Ω–∏ –≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏.\
        \n–í —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –†–ü –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–π –ø–∞–¥–µ–∂ —É —Ü–µ–ª–∏ (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ). –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±—É–∫–≤–æ–π, –ø–µ—Ä–≤–æ–π –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–¥–µ–∂–∞.\
        \n–ü—Ä–∏–º–µ—Ä: <code>.—Ä–ø–≤ —É–±–∏–ª</code> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂. –ê <code>.—Ä–ø–¥ —É–±–∏–ª</code> ‚Äî –¥–∞—Ç–µ–ª—å–Ω—ã–π. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å, —Ç–æ —Ü–µ–ª—å –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–æ.")


@dp.message_handler(commands=["—Å–ø–∏—Å–æ–∫"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp_spis(message: types.Message):
    if message.chat.type != 'private':
        warner = get_warner(message.chat.id, message.from_user.id)
        if warner == None:
            warner = [message.chat.id, message.from_user.id, 0, 0, 0]
        if warner[4] != 0:
            return
    
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    endrp = " —Ä–ø"
    if endrp in message.text.lower():
        nick = html.escape(message.from_user.first_name)
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        await message.reply(f"<a href='tg://user?id={message.from_user.id}'>{nick}</a>, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –†–ü –∫–æ–º–∞–Ω–¥:\n \
        \n –í–º–µ—Å—Ç–æ —Ç–æ—á–µ–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ [/] –∏ [!]\
        \n 1) .<code>–£–±–∏—Ç—å</code>\
        \n 2) .<code>–û–±–Ω—è—Ç—å</code>\
        \n 3) .<code>–£–∫—É—Å–∏—Ç—å</code>\
        \n 4) .<code>–ö—É—Å–Ω—É—Ç—å</code>\
        \n 5) .<code>–ü–Ω—É—Ç—å</code>\
        \n 6) .<code>–ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞—Ç—å</code>\
        \n 7) .<code>–í—ã–µ–±–∞—Ç—å</code>\
        \n 8) .<code>–¢—Ä–∞—Ö–Ω—É—Ç—å</code>\
        \n 9) .<code>–ü–æ–≥–ª–∞–¥–∏—Ç—å</code>\
        \n10) <code>.–°–µ–∫—Å</code> –∏–ª–∏ <code>–¥–µ–ª–∞—Ç—å —Å–µ–∫—Å</code> –∏–ª–∏ <code>–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–∏–º</code>\
        \n11) .<code>–ü–æ—Ç—Ä–æ–≥–∞—Ç—å</code>\
        \n12) .<code>–ö—É—Å—å</code>\
        \n13) .<code>–£–¥–∞—Ä–∏—Ç—å</code>, –∏ .<code>—É–µ–±–∞—Ç—å</code>\
        \n14) .<code>–ü–æ–∂–∞—Ç—å —Ä—É–∫—É</code>, –∏ .<code>–ø–æ–∂–∞—Ç—å —à–µ—é</code>\
        \n15) .<code>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å</code>, ‚Ä¶<code>–Ω–∞ —á–∞–π</code>, ‚Ä¶<code>–Ω–∞ –∫–æ—Ñ–µ</code>, ‚Ä¶<code>–Ω–∞ –ø–∏–≤–æ</code>\
        \n16) .<code>–õ–∏–∑—å</code>, –∏ .<code>–ª–∏–∑–Ω—É—Ç—å</code>\
        \n17) .<code>–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å</code>\
        \n18) .<code>–ó–∞—Å–æ—Å–∞—Ç—å</code>\
        \n19) .<code>–†–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å</code>\
        \n20) .<code>–°–æ–±–æ–ª–µ–∑–Ω–æ–≤–∞—Ç—å</code> –∏ <code>.—Å–æ–±–ª</code> \
        \n21) .<code>–°–≤—è–∑–∞—Ç—å</code>\
        \n22) .<code>–û—Ç–¥–∞—Ç—å—Å—è</code>\
        \n23) .<code>–û—Ç—Å–æ—Å–∞—Ç—å</code> –∏–ª–∏ .<code>–æ—Ç–ª–∏–∑–∞—Ç—å</code> –∏–ª–∏ <code>–¥–µ–ª–∞—Ç—å –æ—Ä–∞–ª</code>\
        \n24) .<code>–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å</code> –∏–ª–∏ .<code>–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å</code> –∏–ª–∏ <code>.–ø—Ä–∏–≤–µ—Ç</code>\
        \n25) .<code>–ò–∑–≤–∏–Ω–∏—Ç—å—Å—è</code> –∏–ª–∏ <code>.–∏–∑–≤–∏–Ω–∏</code> –∏–ª–∏ <code>.–ø—Ä–æ—Å—Ç–∏</code>\
        \n26) .<code>–ü–æ–∫–æ—Ä–º–∏—Ç—å</code>\
        \n27) .<code>–ü–æ–ø—Ä–æ—â–∞—Ç—å—Å—è</code> –∏–ª–∏ <code>.–ø–æ–∫–∞</code>\
        \n28) .<code>–î–∞—Ç—å –ø—è—Ç—å</code>\
        \n29) .<code>–ü–æ—Å–ª–∞—Ç—å</code>, ‚Ä¶<code>–Ω–∞—Ö—É–π</code>, ‚Ä¶<code>–≤ –ø–∏–∑–¥—É</code>\
        \n30) .<code>–û—Ç—Ä–∞–≤–∏—Ç—å</code>\
        \n31) .<code>–ü–æ—Ö–≤–∞–ª–∏—Ç—å</code>\
        \n32) .<code>–ü–æ–Ω—é—Ö–∞—Ç—å</code>\
        \n33) .<code>–°–∂–µ—á—å</code>\
        \n34) .<code>–ù–∞–≥—Ä–∞–¥–∏—Ç—å</code>\
        \n35) .<code>–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å</code> –∏–ª–∏ .<code>—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞—Ç—å</code>\
        \n36) .<code>–ü–æ–∑–≤–∞—Ç—å</code>\
        \n37) .<code>–ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å</code>\
        \n38) .<code>–ù–∞–∫–∞–∑–∞—Ç—å</code>\
        \n39) .<code>–û–±–ª–∏–∑–∞—Ç—å</code>\
        \n40) .<code>–£–Ω–∏–∑–∏—Ç—å</code>\
        \n41) .<code>–í—ã–ª–µ—á–∏—Ç—å</code>\
        \n42) .<code>–£–∫—Ä–∞—Å—Ç—å</code>\
        \n\n–ì–¥–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã —Å—Ç–æ—è—Ç –≤–Ω–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è, —Ç–∞–º –º–æ–∂–Ω–æ –±–µ–∑ –Ω–∏—Ö (–∏–ª–∏ —Å –Ω–∏–º–∏), –≥–¥–µ –∏—Ö –Ω–µ—Ç, —Ç–∞–º —Ç–æ–ª—å–∫–æ –±–µ–∑ –Ω–∏—Ö, –∞ –≥–¥–µ –æ–Ω–∏ —Å—Ç–æ—è—Ç –≤–Ω—É—Ç—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è, —Ç–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–∏–º–∏.\
        \n–ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –†–ü –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã <code>.–º–∞–Ω—É–∞–ª —Ä–ø</code>.")


#–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ games, –æ—Ç–∫—É–¥–∞ –ø–æ—Ç–æ–º –ø–æ–ø–∞–¥–∞–µ—Ç –≤ easters
async def rp_list(message: types.Message):
    
    if message.reply_to_message:
        first_string = message.text.split("\n")[0]
        if len(first_string.split()) > 3:
            return
        elif message.reply_to_message.from_user.id in no_rp_list:
            return
    elif '—Ä–∞–Ω–¥–æ–º' in message.text.lower():
        first_string = message.text.split("\n")[0]
        if len(first_string.split()) > 4:
            return
    
    elif message.entities:
        ent = False
        text_l = message.text

        for entity in message.entities:
            if entity.type in ["text_mention", "mention"]:
                ent = True
                
                text_l = text_l[:entity.offset] + text_l[entity.offset + entity.length:]
                
                break
            
            else:
                continue
        
        if ent == False:
            return
        elif len(text_l.split()) > 3:
            return
    
    else:
        return
    
    wrp1 = "—É–±–∏—Ç—å"
    wrp2 = "–æ–±–Ω—è—Ç—å"
    wrp3 = "—É–∫—É—Å–∏—Ç—å"
    wrp4 = "–∫—É—Å–Ω—É—Ç—å"
    wrp5 = "–ø–Ω—É—Ç—å"
    wrp6 = "–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞—Ç—å"
    wrp7 = "–≤—ã–µ–±–∞—Ç—å"
    wrp8 = "—Ç—Ä–∞—Ö–Ω—É—Ç—å"
    wrp9 = "–ø–æ–≥–ª–∞–¥–∏—Ç—å"
    wrp10 = ["–¥–µ–ª–∞—Ç—å —Å–µ–∫—Å", "–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–∏–º"]
    wrp11 = "–ø–æ—Ç—Ä–æ–≥–∞—Ç—å"
    wrp12 = "–∫—É—Å—å"
    wrp13 = ["—É–¥–∞—Ä–∏—Ç—å", "—É–µ–±–∞—Ç—å"]
    wrp14 = "–ø–æ–∂–∞—Ç—å" #–ø–æ–∂–∞—Ç—å —Ä—É–∫—É, –∏ –ø–æ–∂–∞—Ç—å —à–µ—é"
    wrp15 = "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å" #, ‚Ä¶–Ω–∞ —á–∞–π, ‚Ä¶–Ω–∞ –∫–æ—Ñ–µ, ‚Ä¶–Ω–∞ –ø–∏–≤–æ
    wrp16 = ["–ª–∏–∑—å", "–ª–∏–∑–Ω—É—Ç—å"]
    wrp17 = "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å"
    wrp18 = "–∑–∞—Å–æ—Å–∞—Ç—å"
    wrp19 = "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å"
    wrp20 = "—Å–æ–±–æ–ª–µ–∑–Ω–æ–≤–∞—Ç—å"
    wrp21 = "—Å–≤—è–∑–∞—Ç—å"
    wrp22 = "–æ—Ç–¥–∞—Ç—å—Å—è"
    wrp23 = ["–æ—Ç—Å–æ—Å–∞—Ç—å", "–æ—Ç–ª–∏–∑–∞—Ç—å", "–¥–µ–ª–∞—Ç—å –æ—Ä–∞–ª"]
    wrp24 = ["–ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"]
    wrp25 = "–∏–∑–≤–∏–Ω–∏—Ç—å—Å—è"
    wrp26 = "–ø–æ–∫–æ—Ä–º–∏—Ç—å"
    wrp27 = "–ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è"
    wrp28 = "–¥–∞—Ç—å –ø—è—Ç—å"
    wrp29 = "–ø–æ—Å–ª–∞—Ç—å" #‚Ä¶–Ω–∞—Ö—É–π, ‚Ä¶–≤ –ø–∏–∑–¥—É
    wrp30 = "–æ—Ç—Ä–∞–≤–∏—Ç—å"
    wrp31 = "–ø–æ—Ö–≤–∞–ª–∏—Ç—å"
    wrp32 = "–ø–æ–Ω—é—Ö–∞—Ç—å"
    wrp33 = "—Å–∂–µ—á—å"
    wrp34 = "–Ω–∞–≥—Ä–∞–¥–∏—Ç—å"
    wrp35 = ["–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", "—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞—Ç—å"]
    wrp36 = "–ø–æ–∑–≤–∞—Ç—å"
    wrp37 = "–ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å"
    wrp38 = "–Ω–∞–∫–∞–∑–∞—Ç—å"
    wrp39 = "–æ–±–ª–∏–∑–∞—Ç—å"
    wrp40 = "—É–Ω–∏–∑–∏—Ç—å"
    wrp41 = "–≤—ã–ª–µ—á–∏—Ç—å"
    wrp42 = "—É–∫—Ä–∞—Å—Ç—å"
    
    done = 0
    if message.text.lower().startswith(wrp1):
        done = await rp1(message)
    if message.text.lower().startswith(wrp2):
        done = await rp2(message)
    if message.text.lower().startswith(wrp3):
        done = await rp3(message)
    if message.text.lower().startswith(wrp4):
        done = await rp4(message)
    if message.text.lower().startswith(wrp5):
        done = await rp5(message)
    if message.text.lower().startswith(wrp6):
        done = await rp6(message)
    if message.text.lower().startswith(wrp7):
        done = await rp7(message)
    if message.text.lower().startswith(wrp8):
        done = await rp8(message)
    if message.text.lower().startswith(wrp9):
        done = await rp9(message)
    for word in wrp10:
        if message.text.lower().startswith(word):
            done = await rp10(message)
            break
    if message.text.lower().startswith(wrp11):
        done = await rp11(message)
    if message.text.lower().startswith(wrp12):
        done = await rp12(message)
    for word in wrp13:
        if message.text.lower().startswith(word):
            done = await rp13(message)
            break
    if message.text.lower().startswith(wrp14):
        done = await rp14(message)
    if message.text.lower().startswith(wrp15):
        done = await rp15(message)
    for word in wrp16:
        if message.text.lower().startswith(word):
            done = await rp16(message)
            break
    if message.text.lower().startswith(wrp17):
        done = await rp17(message)
    if message.text.lower().startswith(wrp18):
        done = await rp18(message)
    if message.text.lower().startswith(wrp19):
        done = await rp19(message)
    if message.text.lower().startswith(wrp20):
        done = await rp20(message)
    if message.text.lower().startswith(wrp21):
        done = await rp21(message)
    if message.text.lower().startswith(wrp22):
        done = await rp22(message)
    for word in wrp23:
        if message.text.lower().startswith(word):
            done = await rp23(message)
            break
    for word in wrp24:
        if message.text.lower().startswith(word):
            done = await rp24(message)
            break
    if message.text.lower().startswith(wrp25):
        done = await rp25(message)
    if message.text.lower().startswith(wrp26):
        done = await rp26(message)
    if message.text.lower().startswith(wrp27):
        done = await rp27(message)
    if message.text.lower().startswith(wrp28):
        done = await rp28(message)
    if message.text.lower().startswith(wrp29):
        done = await rp29(message)
    if message.text.lower().startswith(wrp30):
        done = await rp30(message)
    if message.text.lower().startswith(wrp31):
        done = await rp31(message)
    if message.text.lower().startswith(wrp32):
        done = await rp32(message)
    if message.text.lower().startswith(wrp33):
        done = await rp33(message)
    if message.text.lower().startswith(wrp34):
        done = await rp34(message)
    for word in wrp35:
        if message.text.lower().startswith(word):
            done = await rp35(message)
            break
    if message.text.lower().startswith(wrp36):
        done = await rp36(message)
    if message.text.lower().startswith(wrp37):
        done = await rp37(message)
    if message.text.lower().startswith(wrp38):
        done = await rp38(message)
    if message.text.lower().startswith(wrp39):
        done = await rp39(message)
    if message.text.lower().startswith(wrp40):
        done = await rp40(message)
    if message.text.lower().startswith(wrp41):
        done = await rp41(message)
    if message.text.lower().startswith(wrp42):
        done = await rp42(message)
    
    if done == 0:
        return
    else:
        return 1


def get_replic(text):
    replic = ""
    match = re.search(r'\n(.+)\Z', text)
    if match:
        replic = f"\nüí¨ –° —Ä–µ–ø–ª–∏–∫–æ–π: ¬´{match.group(1)}¬ª"
    return replic


def get_funny(message: types.Message):
    if message.chat.type == 'private':
        return 1
    chats = message.chat.id
    chat = get_chat(chats)
    if check_chat(chats):
        create_chat(chats)
        chat = get_chat(chats)
    funny = chat[4]
    return funny


async def do_8_y(user, user2, text, msg):
    if len(text.split()) > 2:
        return
    text = text.lower()
    
    sex_word = ["–≤—ã–µ–±", "–≤—ã—ë–±", "–≤—ãe–±", "—Å–µ–∫—Å", "c–µ–∫—Å", "—Åe–∫—Å", "—Å–µ–∫c", "ce–∫—Å", "ce–∫c", "c–µ–∫c", "—Åe–∫c", "–æ—Ç—Å–æ—Å", "o—Ç—Å–æ—Å", "–æ—Çc–æ—Å", "–æ—Ç—Å–æc", "o—Ç—Å–æc", "–æ—Ç—Åoc", "–æ—Ç–ª–∏–∑", "o—Ç–ª–∏–∑"]
    for word in sex_word:
        if word in text:
            eight_years(msg.chat.id, user, user2, msg, True)
            return
        else:
            continue

    sex_word_2 = ["–∏–∑–Ω–∞—Å–∏–ª", "–∏–∑–Ωa—Å–∏–ª", "–∏–∑–Ω–∞c–∏–ª", "–∏–∑–Ωac–∏–ª"]
    for word in sex_word_2:
        if word in text:
            eight_years(msg.chat.id, user, user2, msg, False)
            return
        else:
            continue
    
    sex_word_3 = ["–µ–±–∞–ª", "e–±–∞–ª", "–µ–±a–ª", "e–±a–ª", "—Ç—Ä–∞—Ö", "—Ç—Äa—Ö", "—Ç—Ä–∞x", "—Ç—Äax", "o—Ç—å—ë–±–∞", "o—Ç—åe–±–∞", "o—Ç—ä—ë–±–∞", "o—Ç—äe–±–∞", "o—Ç—å–µ–±–∞", "o—Ç—ä–µ–±–∞", "o—Ç—å—ë–±a", "o—Ç—åe–±a", "o—Ç—ä—ë–±a", "o—Ç—äe–±a", "o—Ç—å–µ–±a", "o—Ç—ä–µ–±a", "–æ—Ç—å—ë–±–∞", "–æ—Ç—åe–±–∞", "–æ—Ç—ä—ë–±–∞", "–æ—Ç—äe–±–∞", "–æ—Ç—å–µ–±–∞", "–æ—Ç—ä–µ–±–∞", "–æ—Ç—å—ë–±a", "–æ—Ç—åe–±a", "–æ—Ç—ä—ë–±a", "–æ—Ç—äe–±a", "–æ—Ç—å–µ–±a", "–æ—Ç—ä–µ–±a"]
    for word in sex_word_2:
        for word2 in text.split():
            if word2.startswith(word):
                eight_years(msg.chat.id, user, user2, msg, True)
                return
    
    sex_word_4 = ["o—Ç—å—ë–±", "o—Ç—åe–±", "o—Ç—ä—ë–±", "o—Ç—äe–±", "o—Ç—å–µ–±", "o—Ç—ä–µ–±", "–æ—Ç—å—ë–±", "–æ—Ç—åe–±", "–æ—Ç—ä—ë–±", "–æ—Ç—äe–±", "–æ—Ç—å–µ–±", "–æ—Ç—ä–µ–±"]
    for word in sex_word_2:
        for word2 in text.split():
            if word2 == word:
                eight_years(msg.chat.id, user, user2, msg, True)
                return

@dp.message_handler(commands=["—Ä–ø", "rp", "—Ä–ø–∏", "rp–∏", "—Ä–ø—Ä", "rp—Ä", "—Ä–ø–¥", "rp–¥", "—Ä–ø–≤", "rp–≤", "—Ä–ø—Ç", "rp—Ç", "—Ä–ø–ø", "rp–ø"], commands_prefix="/!.")
async def rp_command(message: types.Message):
    if message.chat.type != 'private':
        warner = get_warner(message.chat.id, message.from_user.id)
        if warner == None:
            warner = [message.chat.id, message.from_user.id, 0, 0, 0]
        if warner[4] != 0:
            return
    
    funny = get_funny(message)
    
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
    

    
    emodz = ""
    emodz1 = ""
    
    match = re.search(r'%(.+)\Z', message.text)
    if match:
        emodz1 = match.group(1)
        if emodz1 != "":
            emodz = f"{emodz1} | "
    
    match = re.search(r'%(.+)\n', message.text)
    if match:
        emodz1 = match.group(1)
        if emodz1 != "":
            emodz = f"{emodz1} | "
    
    replic = get_replic(message.text)
    
    if message.reply_to_message:
        if message.reply_to_message.from_user.id in no_rp_list:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except:
                pass
            return
        
        user2 = create_user(message.reply_to_message.from_user.id, message.reply_to_message.from_user.username, message.reply_to_message.from_user.first_name)
        
        user = create_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
        
        if check_monik(user2[0], user2[8]) == True:
            rep_monic = get_monik(user2[0], user2[8])[2]
            
            if user2[5] < rep_monic:
                if user2[8] != "":
                    user2 = [user2[0], user2[1], user2[8], user2[3], user2[4], user2[5], user2[6], user2[7], user2[8]]
            
            
            elif user[5] > user2[5]:
                if user2[8] != "":
                    user2 = [user2[0], user2[1], user2[8], user2[3], user2[4], user2[5], user2[6], user2[7], user2[8]]
        
        if user2[0] in no_rp_list:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except:
                pass
            return
        
        nick2 = user2[2]
        command = message.text.split(" ")[0]
        if command.lower().endswith("—Ä–ø–∏") or command.lower().endswith("rp–∏"):
            nick2 = morph_word(user2[0], user2[2], user2[4])[0]
        elif command.lower().endswith("—Ä–ø—Ä") or command.lower().endswith("rp—Ä"):
            nick2 = morph_word(user2[0], user2[2], user2[4])[1]
        elif command.lower().endswith("—Ä–ø–¥") or command.lower().endswith("rp–¥"):
            nick2 = morph_word(user2[0], user2[2], user2[4])[2]
        elif command.lower().endswith("—Ä–ø–≤") or command.lower().endswith("rp–≤"):
            nick2 = morph_word(user2[0], user2[2], user2[4])[3]
        elif command.lower().endswith("—Ä–ø—Ç") or command.lower().endswith("rp—Ç"):
            nick2 = morph_word(user2[0], user2[2], user2[4])[4]
        elif command.lower().endswith("—Ä–ø–ø") or command.lower().endswith("rp–ø"):
            nick2 = morph_word(user2[0], user2[2], user2[4])[5]
        else:
            nick2 = user2[2]
            
        if "%" in message.text:
            action = message.text.replace(f"{command}", "").split("%")[0]
        else:
            action = message.text.replace(f"{command}", "").split("\n")[0]
        if action == "":
            await message.reply("<b>‚ùå –£–∫–∞–∂–∏ –¥–µ–π—Å—Ç–≤–∏–µ</b>!\n –ü—Ä–∏–º–µ—Ä: !—Ä–ø –£–±–∏–ª")
            return
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except:
            pass
        
        rp_text = f"{html.escape(emodz)}<a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}"
        
        msg = await message.answer(rp_text.replace("  ", " "), parse_mode="html")
        await do_8_y(user, user2, action, msg)
        return
    
    else:
        match = re.search(r'@(\w+)', message.text)
        if match:
            name = match.group(1)
            
            if check_username(name):
                
                if message.chat.type == 'private':
                    await message.reply("<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞!</b>")
                    return

                try:
                    member = await pyro_get_chat_member(message.chat.id, name)
                    
                    if check_user(member.user.id):
                        create_user_main(member.user.id, name, member.user.first_name)
                    else:
                        set_username(member.user.id, name)
                    
                    user2 = get_user(member.user.id)
                
                except:
                    await message.reply("<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞!</b>")
                    return
            
            else:
                user2 = get_username(name)
            
            user = create_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
        
            if check_monik(user2[0], user2[8]) == True:
                rep_monic = get_monik(user2[0], user2[8])[2]
                
                if user2[5] < rep_monic:
                    if user2[8] != "":
                        user2 = [user2[0], user2[1], user2[8], user2[3], user2[4], user2[5], user2[6], user2[7], user2[8]]
                
                
                elif user[5] > user2[5]:
                    if user2[8] != "":
                        user2 = [user2[0], user2[1], user2[8], user2[3], user2[4], user2[5], user2[6], user2[7], user2[8]]
                    
            
            if user2[0] in no_rp_list:
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                except:
                    pass
                return
            nick2 = user2[1]
            command = message.text.split(" ")[0]
            if command.lower().endswith("—Ä–ø–∏") or command.lower().endswith("rp–∏"):
                nick2 = morph_word(user2[0], user2[2], user2[4])[0]
            elif command.lower().endswith("—Ä–ø—Ä") or command.lower().endswith("rp—Ä"):
                nick2 = morph_word(user2[0], user2[2], user2[4])[1]
            elif command.lower().endswith("—Ä–ø–¥") or command.lower().endswith("rp–¥"):
                nick2 = morph_word(user2[0], user2[2], user2[4])[2]
            elif command.lower().endswith("—Ä–ø–≤") or command.lower().endswith("rp–≤"):
                nick2 = morph_word(user2[0], user2[2], user2[4])[3]
            elif command.lower().endswith("—Ä–ø—Ç") or command.lower().endswith("rp—Ç"):
                nick2 = morph_word(user2[0], user2[2], user2[4])[4]
            elif command.lower().endswith("—Ä–ø–ø") or command.lower().endswith("rp–ø"):
                nick2 = morph_word(user2[0], user2[2], user2[4])[5]
            else:
                nick2 = user2[2]
            
            if "@" in emodz1:
                action = message.text.replace(f"{command}", "").split("%")[0]
                emodz1 = emodz1.split("@")[0]
                if emodz1 != "":
                    emodz = f"{emodz1}|"
                if "@" in emodz:
                    emodz = ""
            else:
                action = message.text.replace(f"{command}", "").split("@")[0]
            if action == "":
                await message.reply("<b>‚ùå –£–∫–∞–∂–∏ –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n–ü—Ä–∏–º–µ—Ä: !—Ä–ø –û–±–Ω—è–ª")
            
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            except:
                pass
            
            rp_text = f"{html.escape(emodz)}<a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}"
            msg = await message.answer(rp_text.replace("  ", " "), parse_mode="html")
            await do_8_y(user, user2, action, msg)
            return
        else:
            user = create_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
            for entity in message.entities:
                if entity.type == "text_mention":

                    user2_id = entity.user.id

                    user2 = create_user(user2_id, str(user2_id), entity.user.first_name)
                    
                    if check_monik(user2[0], user2[8]) == True:
                        rep_monic = get_monik(user2[0], user2[8])[2]
                        if user2[5] < rep_monic:
                            if user2[8] != "":
                                user2 = [user2[0], user2[1], user2[8], user2[3], user2[4], user2[5], user2[6], user2[7], user2[8]]
                        elif user[5] > user2[5]:
                            if user2[8] != "":
                                user2 = [user2[0], user2[1], user2[8], user2[3], user2[4], user2[5], user2[6], user2[7], user2[8]]
    
                    if user2[0] in no_rp_list:
                        try:
                            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                        except:
                            pass
                        return


                    name = message.text[entity.offset:entity.offset + entity.length]
                    nick2 = user2[2]
                    command = message.text.split(" ")[0]
                    if command.lower().endswith("—Ä–ø–∏") or command.lower().endswith("rp–∏"):
                        nick2 = morph_word(user2[0], user2[2], user2[4])[0]
                    elif command.lower().endswith("—Ä–ø—Ä") or command.lower().endswith("rp—Ä"):
                        nick2 = morph_word(user2[0], user2[2], user2[4])[1]
                    elif command.lower().endswith("—Ä–ø–¥") or command.lower().endswith("rp–¥"):
                        nick2 = morph_word(user2[0], user2[2], user2[4])[2]
                    elif command.lower().endswith("—Ä–ø–≤") or command.lower().endswith("rp–≤"):
                        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
                    elif command.lower().endswith("—Ä–ø—Ç") or command.lower().endswith("rp—Ç"):
                        nick2 = morph_word(user2[0], user2[2], user2[4])[4]
                    elif command.lower().endswith("—Ä–ø–ø") or command.lower().endswith("rp–ø"):
                        nick2 = morph_word(user2[0], user2[2], user2[4])[5]
                    else:
                        nick2 = user2[2]
                    
                    if name in emodz1:
                        action = message.text.replace(f"{command}", "").split("%")[0]
                        emodz1 = emodz1.split(name)[0]
                        if emodz1 != "":
                            emodz = f"{emodz1}|"
                        if entity.user.first_name in emodz:
                            emodz = ""
                    else:
                        action = message.text.replace(f"{command}", "").split(name)[0]
    
                    
                    if action == "":
                        await message.reply("<b>‚ùå –£–∫–∞–∂–∏ –¥–µ–π—Å—Ç–≤–∏–µ!</b>\n–ü—Ä–∏–º–µ—Ä: !—Ä–ø –û–±–Ω—è–ª")
                    
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                    except:
                        pass
                    
                    rp_text = f"{html.escape(emodz)}<a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}"
                    msg = await message.answer(rp_text.replace("  ", " "), parse_mode="html")
                    await do_8_y(user, user2, action, msg)
                    return
                    

                else:
                    continue

            
            if message.chat.type != 'private':
                members = get_members(message.chat.id)
                for element in members:
                    member = choice(members)
                    user2 = get_user(member[1])
                    if user2[0] in no_rp_list:
                        continue
                    else:
                        if check_monik(user2[0], user2[8]) == True:
                            rep_monic = get_monik(user2[0], user2[8])[2]
                            if user2[5] < rep_monic:
                                if user2[8] != "":
                                    user2 = [user2[0], user2[1], user2[8], user2[3], user2[4], user2[5], user2[6], user2[7], user2[8]]
                            elif user[5] > user2[5]:
                                if user2[8] != "":
                                    user2 = [user2[0], user2[1], user2[8], user2[3], user2[4], user2[5], user2[6], user2[7], user2[8]]

                        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
                        break
                
                if user2 == None:
                    await message.reply("<b>‚ùå –£–∫–∞–∂–∏ –¥–µ–π—Å—Ç–≤–∏–µ (–∏–ª–∏ —Ü–µ–ª—å)</b>!\n –ü—Ä–∏–º–µ—Ä: !—Ä–ø –£–±–∏–ª (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n –ü—Ä–∏–º–µ—Ä: !—Ä–ø —É–±–∏–ª @[username] (–≤ –≤–æ–∑–¥—É—Ö)")
                    return
                

               
                if check_monik(user2[0], user2[8]) == True:
                    rep_monic = get_monik(user2[0], user2[8])[2]
                    
                    if user2[5] < rep_monic:
                        if user2[8] != "":
                            user2 = [user2[0], user2[1], user2[8], user2[3], user2[4], user2[5], user2[6], user2[7], user2[8]]
                    
                    
                    elif user[5] > user2[5]:
                        if user2[8] != "":
                            user2 = [user2[0], user2[1], user2[8], user2[3], user2[4], user2[5], user2[6], user2[7], user2[8]]
                
                if user2[0] in no_rp_list:
                    await message.reply("<b>‚ùå –£–∫–∞–∂–∏ –¥–µ–π—Å—Ç–≤–∏–µ (–∏–ª–∏ —Ü–µ–ª—å)</b>!\n –ü—Ä–∏–º–µ—Ä: !—Ä–ø –£–±–∏–ª (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n –ü—Ä–∏–º–µ—Ä: !—Ä–ø —É–±–∏–ª @[username] (–≤ –≤–æ–∑–¥—É—Ö)")
                    return
                
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                except:
                    pass
                
                nick2 = user2[2]
                command = message.text.split(" ")[0]
                if command.lower().endswith("—Ä–ø–∏") or command.lower().endswith("rp–∏"):
                    nick2 = morph_word(user2[0], user2[2], user2[4])[0]
                elif command.lower().endswith("—Ä–ø—Ä") or command.lower().endswith("rp—Ä"):
                    nick2 = morph_word(user2[0], user2[2], user2[4])[1]
                elif command.lower().endswith("—Ä–ø–¥") or command.lower().endswith("rp–¥"):
                    nick2 = morph_word(user2[0], user2[2], user2[4])[2]
                elif command.lower().endswith("—Ä–ø–≤") or command.lower().endswith("rp–≤"):
                    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
                elif command.lower().endswith("—Ä–ø—Ç") or command.lower().endswith("rp—Ç"):
                    nick2 = morph_word(user2[0], user2[2], user2[4])[4]
                elif command.lower().endswith("—Ä–ø–ø") or command.lower().endswith("rp–ø"):
                    nick2 = morph_word(user2[0], user2[2], user2[4])[5]
                else:
                    nick2 = user2[2]
                    
                if "%" in message.text:
                    action = message.text.replace(f"{command}", "").split("%")[0]
                else:
                    action = message.text.replace(f"{command}", "").split("\n")[0]
                if action == "":
                    await message.reply("<b>‚ùå –£–∫–∞–∂–∏ –¥–µ–π—Å—Ç–≤–∏–µ</b>!\n –ü—Ä–∏–º–µ—Ä: !—Ä–ø –£–±–∏–ª")
                    return
                
                
                rp_text = f"{html.escape(emodz)}<a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}"
                
                msg = await message.answer(rp_text.replace("  ", " "), parse_mode="html")
                await do_8_y(user, user2, action, msg)

            await message.reply("<b>‚ùå –£–∫–∞–∂–∏ –¥–µ–π—Å—Ç–≤–∏–µ (–∏–ª–∏ —Ü–µ–ª—å)</b>!\n –ü—Ä–∏–º–µ—Ä: !—Ä–ø –£–±–∏–ª (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n –ü—Ä–∏–º–µ—Ä: !—Ä–ø —É–±–∏–ª @[username] (–≤ –≤–æ–∑–¥—É—Ö)")
            return



#–û–ë–õ–ò–ó–ê–¢–¨
@dp.message_handler(commands=["—É–∫—Ä–∞—Å—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp42(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    result = randint(0, 100)
    
    if result >= 80:
        rpword = ["–±—ã–ª–∏ –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã", "–±—ã–ª –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω", "–±—ã–ª–∞ –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω–∞", "–±—ã–ª–æ –∑–∞–ø–µ—á–∞—Ç–∞–Ω–æ", "–∑–∞—Ç–∏—Å–∫–∏–≤–∞–µ—Ç—Å—è"]
        rpemodz = ["üë§‚õìüöì", "üë®‚Äçü¶≤‚õìüöì", "üë©‚Äçü¶≤‚õìüöì", "üëæü™¨üîØ", "üê±ü§ó"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[4]
    else:
        rpword = ["—É–∫—Ä–∞–ª–∏", "—É–∫—Ä–∞–ª", "—É–∫—Ä–∞–ª–∞", "–∑–∞–±—Ä–∞–ª–æ —Å–µ–±–µ", "–ø–æ—Ö–∏—â–∞–µ—Ç"]
        rpemodz = ["ü•∑ü™¢üòµ", "ü•∑ü™¢üòµ", "ü•∑ü™¢üòµ", "üëæü™∏üòµ‚Äçüí´", "üò∏ü™¢üòµ‚Äçüí´"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]

    replic = get_replic(message.text)
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–û–ë–õ–ò–ó–ê–¢–¨
@dp.message_handler(commands=["–≤—ã–ª–µ—á–∏—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp41(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return

    rpword = ["–≤—ã–ª–µ—á–∏–ª–∏", "–≤—ã–ª–µ—á–∏–ª", "–≤—ã–ª–µ—á–∏–ª–∞", "–∏—Å—Ü–µ–ª–∏–ª–æ", "–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç"]
    rpemodz = ["üë§üíäüôÇ", "üë®‚Äç‚öïÔ∏èüíäüôÇ", "üë©‚Äç‚öïÔ∏èüíâüôÇ", "üëæüí´üòÆ", "üò∏üëÖüòä"]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    replic = get_replic(message.text)
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–£–ù–ò–ó–ò–¢–¨
@dp.message_handler(commands=["—É–Ω–∏–∑–∏—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp40(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    replic = get_replic(message.text)

    user2 = await rp_check(message)
    
    if user2 == None:
        return 0
    if user2[0] in no_rp_list:
        return
    
    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    
    result = randint(0, 100)
    
    if result >= 80:
        rpword = ["–±—ã–ª–∏ —É–Ω–∏–∂–µ–Ω—ã", "–±—ã–ª —É–Ω–∏–∂–µ–Ω", "–±—ã–ª–∞ —É–Ω–∏–∂–µ–Ω–∞", "–±—ã–ª–æ —É–Ω–∏–∂–µ–Ω–æ", "—Å–∏–ª–æ–π –≤—ã–∫—É–ø—ã–≤–∞–µ—Ç—Å—è"]
        rpemodz = ["üòéüëáü¶µüë§", "üòéüëáü¶µüôá‚Äç‚ôÇÔ∏è", "üòéüëáüöΩüôá‚Äç‚ôÄÔ∏è", "üëæüîØ‚Üíüßû", "ü´§üòæüßº"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[4]
    else:
        rpword = ["—É–Ω–∏–∑–∏–ª–∏", "—É–Ω–∏–∑–∏–ª", "—É–Ω–∏–∑–∏–ª–∞", "—É–Ω–∏–∑–∏–ª–æ", "—É–Ω–∏–∂–∞–µ—Ç"]
        rpemodz = ["üë§üëáü¶µ", "üë®üëáü¶µ", "üë©üëáüöΩ" , "üëæüëÅü§°", "üòæüëÄüí©"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–û–ë–õ–ò–ó–ê–¢–¨
@dp.message_handler(commands=["–æ–±–ª–∏–∑–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp39(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–æ–±–ª–∏–∑–∞–ª–∏", "–æ–±–ª–∏–∑–∞–ª", "–æ–±–ª–∏–∑–∞–ª–∞", "–æ–±–ª–∏–∑–∞–ª–æ", "–æ–±–ª–∏–∑—ã–≤–∞–µ—Ç"]
    rpemodz = ["üë§üëÖüòÖ", "üë®üëÖüòÖ", "üë©üëÖüòÖ", "üëæüîûüëÖüòµ", "üò∏üëÖüòÇ"]

    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    msg_info = await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    eight_years(message.chat.id, user, user2, msg_info, False)

#–ù–ê–ö–ê–ó–ê–¢–¨
@dp.message_handler(commands=["–Ω–∞–∫–∞–∑–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp38(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0
    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return    
    
    result = randint(0,100)
    if result < 80:
        rpword = ["–Ω–∞–∫–∞–∑–∞–ª–∏", "–Ω–∞–∫–∞–∑–∞–ª", "–Ω–∞–∫–∞–∑–∞–ª–∞", "–Ω–∞–∫–∞–∑–∞–ª–æ", "–Ω–∞–∫–∞–∑—ã–≤–∞–µ—Ç-–º—è—É"]
        rpemodz = ["üë§ü§úüòñ", "üë®ü§úüòñ", "üë©üîûüåµüè•" , "üëæüí•‚ö±Ô∏è" , "üòπüí¶üëüüò≠"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    else:
        rpword = ["–ø–æ–ª—É—á–∏–ª–∏ –ø–∏–∑–¥—ã –æ—Ç", "–ø–æ–ª—É—á–∏–ª –ø–∏–∑–¥—ã –æ—Ç", "–ø–æ–ª—É—á–∏–ª–∞ –ø–∏–∑–¥—ã –æ—Ç", "–ø–æ–ª—É—á–∏–ª–æ –ø–∏–∑–¥—ã –æ—Ç", "–ø–æ–ª—É—á–∞–µ—Ç –ø–∏–∑–¥—ã –æ—Ç"]
        rpemodz = ["üë§ü§õü§¨", "üë®ü§õü§¨", "üë©ü§õü§¨", "üëæü§õü§¨", "üôÄü§õü§¨"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[1]
    replic = get_replic(message.text)



    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–ü–û–ó–î–†–ê–í–ò–¢–¨
@dp.message_handler(commands=["–ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp37(message: types.Message):
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    rpword = ["–ø–æ–∑–¥—Ä–∞–≤–∏–ª–∏", "–ø–æ–∑–¥—Ä–∞–≤–∏–ª", "–ø–æ–∑–¥—Ä–∞–≤–∏–ª–∞", "–ø–æ–∑–¥—Ä–∞–≤–∏–ª–æ", "–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç"]
    rpemodz = ["üë§üéâ", "üë®üéä", "üë©üëè", "üëæüéÜ", "üò∏üéÅ"]

    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–ü–û–ó–í–ê–¢–¨
@dp.message_handler(commands=["–ø–æ–∑–≤–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp36(message: types.Message):
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return

    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    replic = get_replic(message.text)
    rpword = ["–ø–æ–∑–≤–∞–ª–∏", "–ø–æ–∑–≤–∞–ª", "–ø–æ–∑–≤–∞–ª–∞", "–ø—Ä–∏–∑–≤–∞–ª–æ", "–∑–æ–≤—ë—Ç"]
    rpemodz = ["üë§üîîüò∂", "üë®üîîüò∂", "üë©üîîüò∂", "üëæüîäüò±", "üò∏ü§åüò±"]
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–ö–ê–°–¢–†–ò–†–û–í–ê–¢–¨
@dp.message_handler(commands=["–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", "—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp35(message: types.Message):
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    rpword = ["—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–ª–∏", "—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–ª", "—Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–ª–∞", "–ø—Ä–µ—Ä–≤–∞–ª–æ —Ä–æ–¥", "—Å—Ç–µ—Ä–∏–ª–∏–∑—É–µ—Ç"]
    rpemodz = ["üë§üíâ", "üë®üíâ", "üë©üíâ", "üëæü¶†", "üòºüíâ"]

    replic = get_replic(message.text)

    
    if user[4] == 3:
        nick2 = morph_word(user2[0], user2[2], user2[4])[1]
    else:
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    if user2[4] == 0:
        await message.answer(f"{html.escape(rpemodz)}üò≠ | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
        return
    if user2[4] == 1:
        rpword = ["–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏", "–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª", "–∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞", "–ø—Ä–µ—Ä–≤–∞–ª–æ —Ä–æ–¥", "–∫–∞—Å—Ç—Ä–∏—Ä—É–µ—Ç"]
        rpemodz = ["üë§‚úÇÔ∏è‚ï∞‚ãÉ‚ïØ", "üë®‚úÇÔ∏è‚ï∞‚ãÉ‚ïØ", "üë©‚úÇÔ∏è‚ï∞‚ãÉ‚ïØ", "üëæ‚ö°Ô∏è‚ï∞‚ãÉ‚ïØ", "üòº‚úÇÔ∏è‚ï∞‚ãÉ‚ïØ"]
        
        action = rpword[user[4]]
        rpemodz = rpemodz[user[4]]
        await message.answer(f"{html.escape(rpemodz)}üò≠ | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
        return
    if user2[4] == 2:    
        await message.answer(f"{html.escape(rpemodz)}üò≠ | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
        return
    if user2[4] == 3:
        await message.answer(f"{html.escape(rpemodz)}üò≠ | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
        return
    if user2[4] == 4:
        await message.answer(f"{html.escape(rpemodz)}üôÄ | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
        return
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.üò≠")
        return

#–ù–ê–ì–†–ê–î–ò–¢–¨
@dp.message_handler(commands=["–Ω–∞–≥—Ä–∞–¥–∏—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp34(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–Ω–∞–≥—Ä–∞–¥–∏–ª–∏", "–Ω–∞–≥—Ä–∞–¥–∏–ª", "–Ω–∞–≥—Ä–∞–¥–∏–ª–∞", "–Ω–∞–≥—Ä–∞–¥–∏–ª–æ", "–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç"]
    rpemodz = ["üë§ü´¥üèÜ", "üë®ü´¥üèÜ", "üë©ü´¥üèÜ", "üëæü´¥ü™ê", "üò∏ü´¥ü•á"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    if user[0] != user2[0]:
        add_rep(user2[0])

#–°–ñ–ï–ß–¨
@dp.message_handler(commands=["—Å–∂–µ—á—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp33(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    replic = get_replic(message.text)
    result = randint(0,100)
    if result < 75:
        rpword = ["—Å–æ–∂–≥–ª–∏", "—Å–∂—ë–≥", "—Å–æ–∂–≥–ª–∞", "—Å–æ–∂–≥–ª–æ", "—Å–∂–∏–≥–∞–µ—Ç"]
        rpemodz = ["üë§üî•üíÄ", "üë®üî•üíÄ", "üë©üî•üíÄ", "üëæ:ü´•‚Üí‚òÄÔ∏è", "üòºüî•üíÄ"]
        mistake = 0
    else:
        rpword = ["—Å–≥–æ—Ä–µ–ª–∏ –≤ –ø–ª–∞–º–µ–Ω–∏ –ø–æ–∂–∞—Ä–∞!", "—Å–≥–æ—Ä–µ–ª –≤ –ø–ª–∞–º–µ–Ω–∏ –ø–æ–∂–∞—Ä–∞!", "—Å–≥–æ—Ä–µ–ª–∞ –≤ –ø–ª–∞–º–µ–Ω–∏ –ø–æ–∂–∞—Ä–∞!", "–∏—Å—á–µ–∑–ª–æ –≤ –ø–ª–∞–º–µ–Ω–∏ –∑–≤–µ–∑–¥—ã!", "—Å–≥–æ—Ä–∞–µ—Ç –≤ –ø–ª–∞–º–µ–Ω–∏ –ø–æ–∂–∞—Ä–∞!"]
        rpemodz = ["üë§‚ùåüî•üíÄ", "üë®‚ùåüî•üíÄ", "üë©‚ùåüî•üíÄ", "üëæ‚ùå‚òÄÔ∏è", "üôÄ‚ùåüî•üíÄ"]
        mistake = 1

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    if mistake == 1:
        await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)}{html.escape(replic)}", parse_mode="html")
        return
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    return

#–ü–û–ù–Æ–•–ê–¢–¨
@dp.message_handler(commands=["–ø–æ–Ω—é—Ö–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp32(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–ø–æ–Ω—é—Ö–∞–ª–∏", "–ø–æ–Ω—é—Ö–∞–ª", "–ø–æ–Ω—é—Ö–∞–ª–∞", "–∏–∑—É—á–∏–ª–æ", "–æ–±–Ω—é—Ö–∏–≤–∞–µ—Ç"]
    rpemodz = ["üë§üëÉüòë", "üë®üëÉüòë", "üë©üëÉüòë", "üëæüëÅü©ª", "üòæüîéüòë"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–ü–û–•–í–ê–õ–ò–¢–¨
@dp.message_handler(commands=["–ø–æ—Ö–≤–∞–ª–∏—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp31(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–ø–æ—Ö–≤–∞–ª–∏–ª–∏", "–ø–æ—Ö–≤–∞–ª–∏–ª", "–ø–æ—Ö–≤–∞–ª–∏–ª–∞", "–ø–æ—Ö–≤–∞–ª–∏–ª–æ", "—Ö–≤–∞–ª–∏—Ç"]
    rpemodz = ["üë§üëçüòÄ", "üë®üëçüòÄ", "üë©üëçüòÄ", "üëæüëçü•∂", "üòºüëçüòÄ"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    if user[0] != user2[0]:
        add_rep(user2[0])

#–û–¢–†–ê–í–ò–¢–¨
@dp.message_handler(commands=["–æ—Ç—Ä–∞–≤–∏—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp30(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    replic = get_replic(message.text)
    result = randint(0, 100)    
    if result < 80:
        mistake = 0
    else:
        mistake = 1
    
    if mistake == 0:
        rpword = ["–æ—Ç—Ä–∞–≤–∏–ª–∏", "–æ—Ç—Ä–∞–≤–∏–ª", "–æ—Ç—Ä–∞–≤–∏–ª–∞", "–∑–∞—Ä–∞–∑–∏–ª–æ –º–µ–º–∞–≥–µ–Ω—Ç–æ–º", "–º–æ—á–∏—Ç"]
        rpemodz = ["üë§üß™ü•µ", "üë®üß™ü•µ", "üë©üß™ü•µ", "üëæü™¨‚ò†Ô∏è", "üòºüí¶ü§¢"]
        
        action = rpword[user[4]]
        rpemodz = rpemodz[user[4]]
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
        await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    else:
        rpword = ["–æ—Ç—Ä–∞–≤–∏–ª–∏—Å—å", "–æ—Ç—Ä–∞–≤–∏–ª—Å—è", "–æ—Ç—Ä–∞–≤–∏–ª–∞—Å—å", "–∑–∞—Ä–∞–∑–∏–ª–æ—Å—å –º–µ–º–∞–≥–µ–Ω—Ç–æ–º", "–ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –¥–æ–∂–¥—å"]
        rpemodz = ["üë§üß™ü•µ", "üë®üß™ü•µ", "üë©üß™ü•µ", "üëæü™¨‚ò†Ô∏è", "üåßüòø"]
        
        action = rpword[user[4]]
        rpemodz = rpemodz[user[4]]
        await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)}{html.escape(replic)}", parse_mode="html")


#–ü–û–°–õ–ê–¢–¨ –ù–ê–•–£–ô
@dp.message_handler(commands=["–ø–æ—Å–ª–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞, –∏–ª–∏ –µ–µ –Ω–∞—á–∞–ª–æ
async def rp29(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0
    if user2[0] in no_rp_list:
        return
    
    user = get_user(message.from_user.id)
    
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    replic = get_replic(message.text)
    rpword = ["–ø–æ—Å–ª–∞–ª–∏", "–ø–æ—Å–ª–∞–ª", "–ø–æ—Å–ª–∞–ª–∞", "–ø–æ—Å–ª–∞–ª–æ", "–ø–æ—Å—ã–ª–∞–µ—Ç"]
    rpemodz = ["üë§üñï", "üë®üñï", "üë©üñï", "üëæüñï", "üòºüñï"]
    
    
    endrp = " –Ω–∞—Ö—É–π"  #–∫–æ–Ω–µ—Ü —Ä–ø –∫–æ–º–∞–Ω–¥—ã
    if endrp in message.text.lower():
        rpword = ["–ø–æ—Å–ª–∞–ª–∏ –Ω–∞—Ö—É–π", "–ø–æ—Å–ª–∞–ª –Ω–∞—Ö—É–π", "–ø–æ—Å–ª–∞–ª–∞ –Ω–∞—Ö—É–π", "–æ—Ç–ø—Ä–∞–≤–∏–ª–æ –≤ –µ–±–µ–Ω—è", "—É–∫–∞–∑—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"]
        rpemodz = ["üë§üëâüîû", "üë®üëâüîû", "üë©üëâüîû", "üëæ:üòµ‚Äçüí´‚ÜíüååÔ∏è", "üòº‚ï∞‚ãÉ‚ïØ‚Üí"]
        if user[4] == 4:
            nick2 = morph_word(user2[0], user2[2], user2[4])[2]
    
    endrp = " –≤ –ø–∏–∑–¥—É"  #–∫–æ–Ω–µ—Ü —Ä–ø –∫–æ–º–∞–Ω–¥—ã
    if endrp in message.text.lower():
        rpword = ["–ø–æ—Å–ª–∞–ª–∏ –≤ –ø–∏–∑–¥—É", "–ø–æ—Å–ª–∞–ª –≤ –ø–∏–∑–¥—É", "–ø–æ—Å–ª–∞–ª–∞ –≤ –ø–∏–∑–¥—É", "—Ä–µ–∏–Ω–∫–∞—Ä–Ω–∏—Ä–æ–≤–∞–ª–æ", "—É–∫–∞–∑—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"]
        rpemodz = ["üë§üëâüîû", "üë®üëâüîû", "üë©üëâüîû", "üëæ:üòµ‚Äçüí´‚Üíü§±", "üòºüëâüîû"]
        if user[4] == 4:
            nick2 = morph_word(user2[0], user2[2], user2[4])[2]
    


    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–î–ê–¢–¨ –ü–Ø–¢–¨
@dp.message_handler(commands=["–¥–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp28(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    replic = get_replic(message.text)
    endrp = " –ø—è—Ç—å"
    if endrp in message.text.lower():
        rpword = ["–¥–∞–ª–∏ –ø—è—Ç—å", "–¥–∞–ª –ø—è—Ç—å", "–¥–∞–ª–∞ –ø—è—Ç—å", "–∫–æ—Å–Ω—É–ª–æ—Å—å —Ä—É–∫–∏", "—Ç–æ–ª–∫–∞–µ—Ç –ª–∞–ø–∫–æ–π"]
        rpemodz = ["üë§üñêüòÄ", "üë®üñêüòÄ", "üë©üñêüòÄ", "üëæüñêüò®", "üê±ü´±üòÄ"]
    else:
        return 0

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[2]
    if user[4] == 3:
        nick2 = morph_word(user2[0], user2[2], user2[4])[1]
    if user[4] == 4:
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–ü–û–ö–ê
@dp.message_handler(commands=["–ø–æ–∫–∞", "–ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp27(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–ø–æ–ø—Ä–æ—â–∞–ª–∏—Å—å —Å", "–ø–æ–ø—Ä–æ—â–∞–ª—Å—è —Å", "–ø–æ–ø—Ä–æ—â–∞–ª–∞—Å—å —Å", "–ø–æ–ø—Ä–æ—â–∞–ª–æ—Å—å —Å", "–ø—Ä–æ—â–∞–µ—Ç—Å—è —Å"]
    rpemodz = ["üë§üëãüòî", "üë®üëãüòî", "üë©üëãüòî", "üëæüëãüòÄ", "üòøüëãüòî"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[4]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–ü–û–ö–û–†–ú–ò–¢–¨
@dp.message_handler(commands=["–ø–æ–∫–æ—Ä–º–∏—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp26(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–ø–æ–∫–æ—Ä–º–∏–ª–∏", "–ø–æ–∫–æ—Ä–º–∏–ª", "–ø–æ–∫–æ—Ä–º–∏–ª–∞", "–ø–æ–¥–ø–∏—Ç–∞–ª–æ", "–∫–æ—Ä–º–∏—Ç"]
    rpemodz = ["üë§ü´¥üçñ", "üë®ü´¥üç´", "üë©ü´¥üç¨", "üëæü´¥ü¶ë", "üò∏ü´¥üêü"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–ò–ó–í–ò–ù–ò
@dp.message_handler(commands=["–∏–∑–≤–∏–Ω–∏", "–ø—Ä–æ—Å—Ç–∏", "–∏–∑–≤–∏–Ω–∏—Ç—å—Å—è"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp25(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–∏–∑–≤–∏–Ω–∏–ª–∏—Å—å –ø–µ—Ä–µ–¥", "–∏–∑–≤–∏–Ω–∏–ª—Å—è –ø–µ—Ä–µ–¥", "–∏–∑–≤–∏–Ω–∏–ª–∞—Å—å –ø–µ—Ä–µ–¥", "–∏–∑–≤–∏–Ω–∏–ª–æ—Å—å –ø–µ—Ä–µ–¥", "–∏–∑–≤–∏–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥"]
    rpemodz = ["üë§üôèü§®", "üë®üôèüôÇ", "üë©üôèüôÇ", "üëæüôèüòë", "üê±üôèüôÇ"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[4]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–ü–†–ò–í–ï–¢
@dp.message_handler(commands=["–ø—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å", "–ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp24(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏", "–ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª", "–ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∞", "–ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ", "–º–∞—à–µ—Ç –ª–∞–ø–∫–æ–π"]
    rpemodz = ["üë§üëãü§®", "üë®üëãüôÇ", "üë©üëãüôÇ", "üëæüëãüò≤", "üò∫üëãüôÇ"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    if user[4] == 4:
        nick2 = morph_word(user2[0], user2[2], user2[4])[2]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–û–¢–°–û–°–ê–¢–¨
@dp.message_handler(commands=["–æ—Ç—Å–æ—Å–∞—Ç—å", "–æ—Ç–ª–∏–∑–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp23(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    
    if user2[4] == 2:
        rpword = ["–æ—Ç–ª–∏–∑–∞–ª–∏ —É", "–æ—Ç–ª–∏–∑–∞–ª —É", "–æ—Ç–ª–∏–∑–∞–ª–∞ —É", "–¥–∞—Ä–æ–≤–∞–ª–æ —ç–∫—Å—Ç–∞–∑", "–≤—ã–ª–∏–∑—ã–≤–∞–µ—Ç –≤—Å—ë —É"]
        rpemodz = ["üë§üëÖüßñ‚Äç‚ôÄÔ∏è", "üë®üëÖüßñ‚Äç‚ôÄÔ∏è", "üë©üëÖüë©‚Äç‚ù§Ô∏è‚Äçüë©", "üëæüîûüíÉ", "üòΩüîûüòê"]
        if user[4] == 3:
            nick2 = morph_word(user2[0], user2[2], user2[4])[2]
        else:
            nick2 = morph_word(user2[0], user2[2], user2[4])[1]
    
    elif user2[4] == 1:
        rpword = ["–æ—Ç—Å–æ—Å–∞–ª–∏ —É", "–æ—Ç—Å–æ—Å–∞–ª —É", "–æ—Ç—Å–æ—Å–∞–ª–∞ —É", "–æ—Ç—Å–æ—Å–∞–ª–æ —É", "–≤—ã–ª–∏–∑—ã–≤–∞–µ—Ç –≤—Å—ë —É"]
        rpemodz = ["üë§üëÖü§®", "üë®üëÖüò≥", "üë©üëÖüò≥", "üëæüîûüòß", "üòΩüîûüòê"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[1]
    
    else:
        if "–æ—Ç—Å–æ—Å–∞—Ç—å" in message.text.lower():
            rpword = ["–æ—Ç—Å–æ—Å–∞–ª–∏ —É", "–æ—Ç—Å–æ—Å–∞–ª —É", "–æ—Ç—Å–æ—Å–∞–ª–∞ —É", "–æ—Ç—Å–æ—Å–∞–ª–æ —É", "–≤—ã–ª–∏–∑—ã–≤–∞–µ—Ç –≤—Å—ë —É"]
            rpemodz = ["üë§üëÖü§®", "üë®üëÖüò≥", "üë©üëÖüò≥", "üëæüîûüòß", "üòΩüîûüòê"]
            replic = get_replic(message.text)
            nick2 = morph_word(user2[0], user2[2], user2[4])[1]
        if "–æ—Ç–ª–∏–∑–∞—Ç—å" in message.text.lower():
            rpword = ["–æ—Ç–ª–∏–∑–∞–ª–∏ —É", "–æ—Ç–ª–∏–∑–∞–ª —É", "–æ—Ç–ª–∏–∑–∞–ª–∞ —É", "–¥–∞—Ä–æ–≤–∞–ª–æ —ç–∫—Å—Ç–∞–∑", "–≤—ã–ª–∏–∑—ã–≤–∞–µ—Ç –≤—Å—ë —É"]
            rpemodz = ["üë§üëÖüßñ‚Äç‚ôÄÔ∏è", "üë®üëÖüßñ‚Äç‚ôÄÔ∏è", "üë©üëÖüë©‚Äç‚ù§Ô∏è‚Äçüë©", "üëæüîûüíÉ", "üòΩüîûüòê"]
            if user[4] == 3:
                nick2 = morph_word(user2[0], user2[2], user2[4])[2]
            else:
                nick2 = morph_word(user2[0], user2[2], user2[4])[1]
    
    
    replic = get_replic(message.text)
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]

    
    msg_info = await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    
    eight_years(message.chat.id, user, user2, msg_info, True)

#–û–¢–î–ê–¢–¨–°–Ø
@dp.message_handler(commands=["–æ—Ç–¥–∞—Ç—å—Å—è"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp22(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–æ—Ç–¥–∞–ª–∏—Å—å", "–æ—Ç–¥–∞–ª—Å—è", "–æ—Ç–¥–∞–ª–∞—Å—å", "–æ—Ç–¥–∞–ª–æ—Å—å", "–æ—Ç–¥–∞–µ—Ç—Å—è –≤ —Ä—É–∫–∏"]
    rpemodz = ["üë§üå∂ü§®", "üë®‚ù§Ô∏è‚Äçüî•üôÉ", "üë©üçìüôÉ", "üëæüîûüò®", "üòºüéÅüôÉ"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[2]
    
    if user[4] == 4:
        nick2 = morph_word(user2[0], user2[2], user2[4])[1]
    
    msg_info = await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    if user[4] != 4:
        eight_years(message.chat.id, user, user2, msg_info, True)

#–°–í–Ø–ó–ê–¢–¨
@dp.message_handler(commands=["—Å–≤—è–∑–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp21(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return

    replic = get_replic(message.text)

    
    result = randint(0, 100)
    if result >= 80:

        rpword = ["–ø–æ–ø–∞–ª–∏ –≤ —Ä–∞–±—Å—Ç–≤–æ –∫", "–ø–æ–ø–∞–ª –≤ —Ä–∞–±—Å—Ç–≤–æ –∫", "–ø–æ–ø–∞–ª–∞ –≤ —Ä–∞–±—Å—Ç–≤–æ –∫", "–ø–æ–ø–∞–ª–æ –≤ —Ä–∞–±—Å—Ç–≤–æ –∫", "—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–∏—Ç–æ–º—Ü–µ–º"]
        rpemodz = ["üë§‚õì‚õè", "üë®‚õì‚õè", "üë©‚õìüîû", "üëæ‚Üíüßû", "üê±ü§ó"]
        
        if user[4] == 4:
            nick2 = morph_word(user2[0], user2[2], user2[4])[1]
        else:
            nick2 = morph_word(user2[0], user2[2], user2[4])[2]
    else:

        rpword = ["—Å–≤—è–∑–∞–ª–∏", "—Å–≤—è–∑–∞–ª", "—Å–≤—è–∑–∞–ª–∞", "–∑–∞—Ö–≤–∞—Ç–∏–ª–æ —Ç–µ–Ω—Ç–∞–∫–ª—è–º–∏", "—Å–≤—è–∑—ã–≤–∞–µ—Ç"]
        rpemodz = ["üë§ü™¢ü§ê", "üë®ü™¢ü§ê", "üë©ü™¢ü§ê", "üëæü™∏üòµ‚Äçüí´", "üòºü™¢ü§ê"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")


#–°–û–ë–û–õ–ï–ó–ù–û–í–ê–¢–¨
@dp.message_handler(commands=["—Å–æ–±–æ–ª–µ–∑–Ω–æ–≤–∞—Ç—å", "—Å–æ–±–ª"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp20(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["—Å–æ–±–æ–ª–µ–∑–Ω—É–µ—Ç", "—Å–æ–±–æ–ª–µ–∑–Ω—É–µ—Ç", "—Å–æ–±–æ–ª–µ–∑–Ω—É–µ—Ç", "—Å–æ–±–æ–ª–µ–∑–Ω—É–µ—Ç", "—Å–æ–±–æ–ª–µ–∑–Ω—É–µ—Ç"]
    rpemodz = ["üë§ü´≥üò≠", "üë®ü´≥üò≠", "üë©ü´≥üò≠", "üëæü´≥üò≠", "üòøü´≥üò≠"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[2]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–†–ê–°–°–¢–†–ï–õ–Ø–¢–¨
@dp.message_handler(commands=["—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp19(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    replic = get_replic(message.text)

    result = randint(0, 100)
    if result >= 80:
        rpword = ["–±—ã–ª–∏ —Ä–∞—Å—Å—Ç—Ä–µ–ª—è–Ω—ã", "–±—ã–ª —Ä–∞—Å—Å—Ç—Ä–µ–ª—è–Ω", "–±—ã–ª–∞ —Ä–∞—Å—Å—Ç—Ä–µ–ª—è–Ω–∞", "–±—ã–ª–æ –∑–∞–ø–µ—á–∞—Ç–∞–Ω–æ", "—Ä–∞—Å—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—Ç—Å—è"]
        rpemodz = ["üë§üî´üò°", "üë®üî´üò°", "üë©üî´üò°", "üëæüîØüòé", "üòæüî´üò°"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[4]
    else:
        rpword = ["—Ä–∞—Å—Å—Ç—Ä–µ–ª—è–ª–∏", "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è–ª", "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è–ª–∞", "–ø–æ–º–Ω–æ–∂–∏–ª–æ –Ω–∞ –Ω–æ–ª—å", "—Ä–∞—Å—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—Ç"]
        rpemodz = ["üíÄüî´üë§", "üíÄüî´üë®", "üíÄüî´üë©", "üëæüí£‚ò†Ô∏è", "üíÄüî´üòæ"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]    
    
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–ó–ê–°–û–°–ê–¢–¨
@dp.message_handler(commands=["–∑–∞—Å–æ—Å–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp18(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    if user2[0] in no_rp_list:
        return
    
    rpword = ["–∑–∞—Å–æ—Å–∞–ª–∏", "–∑–∞—Å–æ—Å–∞–ª", "–∑–∞—Å–æ—Å–∞–ª–∞", "–æ—Ç–≤–∞–∫—É—É–º–∏—Ä–æ–≤–∞–ª–æ", "–∑–∞—Å–∞—Å—ã–≤–∞–µ—Ç"]
    rpemodz = ["üòòüîû", "üë®üëÑüîû", "üë©üíãüîû", "üëæüå™üåå", "üò∏üå™üì¶"]
    replic = get_replic(message.text)


    user = get_user(message.from_user.id)
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    msg_info = await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    eight_years(message.chat.id, user, user2, msg_info, True)

#–ü–û–¶–ï–õ–û–í–ê–¢–¨
@dp.message_handler(commands=["–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp17(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–ø–æ—Ü–µ–ª–æ–≤–∞–ª–∏", "–ø–æ—Ü–µ–ª–æ–≤–∞–ª", "–ø–æ—Ü–µ–ª–æ–≤–∞–ª–∞", "–ø–æ—Ü–µ–ª–æ–≤–∞–ª–æ", "—Ü–µ–ª—É–µ—Ç"]
    rpemodz = ["üòô", "üë®üëÑ", "üë©üíã", "üëæüëÑüò®", "üõ∏üòΩ"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–õ–ò–ó–¨
@dp.message_handler(commands=["–ª–∏–∑—å", "–ª–∏–∑–Ω—É—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp16(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return

    wordrp = "–ª–∏–∑–Ω—É—Ç—å"
    if wordrp in message.text.lower():
        ms = False
        rpword = ["–ª–∏–∑–Ω—É–ª–∏", "–ª–∏–∑–Ω—É–ª", "–ª–∏–∑–Ω—É–ª–∞", "–ª–∏–∑–Ω—É–ª–æ", "–ª–∏–∂–µ—Ç"]
        rpemodz = ["üë§üëÖ", "üë®üëÖ", "üë©üëÖ", "üëæüîûüëÖ", "üòªüëÖ"]
    else:
        ms = True
        rpword = ["–ª–∏–∑—å", "–ª–∏–∑—å", "–ª–∏–∑—å", "–ª–∏–∑–™", "–ª–∏–∑—å-–º—è—É"]
        rpemodz = ["üë§üëÖ", "üë®üëÖ", "üë©üëÖ", "üëæüîûüëÖ", "üòªüëÖ"]
    
    replic = get_replic(message.text)
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    msg_info = await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    if ms == True:
        eight_years(message.chat.id, user, user2, msg_info, False)


#–ü–†–ò–ì–õ–ê–°–ò–¢–¨ –ù–ê –ß–ê–ô
@dp.message_handler(commands=["–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp15(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    ms = True
    replic = get_replic(message.text)
    rpword = ["–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –∫ —Å–µ–±–µ", "–ø—Ä–∏–≥–ª–∞—Å–∏–ª –∫ —Å–µ–±–µ", "–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∞ –∫ —Å–µ–±–µ", "–ø—Ä–∏–≥–ª–∞—Å–∏–ª–æ –∫ —Å–µ–±–µ", "–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –∫ —Å–µ–±–µ"]
    rpemodz = ["üë§üëãüè†", "üôãüëãüè†", "üôãüëãüè†", "üëæüëãüåå", "üò∏üëãüì¶"]
    endrp = " –Ω–∞ —á–∞–π"
    if endrp in message.text.lower():
        ms = False
        rpword = ["–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ —á–∞–π", "–ø—Ä–∏–≥–ª–∞—Å–∏–ª –Ω–∞ —á–∞–π", "–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∞ –Ω–∞ —á–∞–π", "–ø—Ä–∏–≥–ª–∞—Å–∏–ª–æ –Ω–∞ —á–∞–π", "–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –Ω–∞ —á–∞–π"]
        rpemodz = ["üë§üëã‚òïÔ∏è", "üôãüëã‚òïÔ∏è", "üôã‚Äç‚ôÄÔ∏èüëã‚òïÔ∏è", "üëæüëãüçµ", "üò∏üëãüçµ"]
    endrp = " –Ω–∞ –∫–æ—Ñ–µ"
    if endrp in message.text.lower():
        ms = False
        rpword = ["–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ –∫–æ—Ñ–µ", "–ø—Ä–∏–≥–ª–∞—Å–∏–ª –Ω–∞ –∫–æ—Ñ–µ", "–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∞ –Ω–∞ –∫–æ—Ñ–µ", "–ø—Ä–∏–≥–ª–∞—Å–∏–ª–æ –Ω–∞ –∫–æ—Ñ–µ", "–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –Ω–∞ –∫–æ—Ñ–µ"]
        rpemodz = ["üë§üëã‚òïÔ∏è", "üôãüëã‚òïÔ∏è", "üôã‚Äç‚ôÄÔ∏èüëã‚òïÔ∏è", "üëæüëã‚òïÔ∏è", "üò∏üëã‚òïÔ∏è"]
    endrp = " –Ω–∞ –ø–∏–≤–æ"
    if endrp in message.text.lower():
        ms = True
        rpword = ["–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ –ø–∏–≤–æ", "–ø—Ä–∏–≥–ª–∞—Å–∏–ª –Ω–∞ –ø–∏–≤–æ", "–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∞ –Ω–∞ –ø–∏–≤–æ", "–ø—Ä–∏–≥–ª–∞—Å–∏–ª–æ –Ω–∞ –ø–∏–≤–æ", "–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –Ω–∞ –ø–∏–≤–æ"]
        rpemodz = ["üë§üëãüç∫", "üôãüëãüç∫", "üôã‚Äç‚ôÄÔ∏èüëãüç∫", "üëæüëãüçª", "üò∏üëãüçª"]

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    msg_info = await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    if ms == True:
        eight_years(message.chat.id, user, user2, msg_info, True)

#–ü–û–ñ–ê–¢–¨ –†–£–ö–£
@dp.message_handler(commands=["–ø–æ–∂–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp14(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return


    if " —Ä—É–∫—É" in message.text.lower():
        user2 = await rp_check(message)
        if user2 == None:
            return 0
        if user2[0] in no_rp_list:
            return
        user = get_user(message.from_user.id)
        
        rpword = ["–ø–æ–∂–∞–ª–∏ —Ä—É–∫—É", "–ø–æ–∂–∞–ª —Ä—É–∫—É", "–ø–æ–∂–∞–ª–∞ —Ä—É–∫—É", "–ø–æ–∂–∞–ª–æ —Ä—É–∫—É", "—Å—Ç—É—á–∏—Ç –ø–æ —Ä—É–∫–µ"]
        rpemodz = ["üë§ü§ùüôÇ", "üë®ü§ùüôÇ", "üë©ü§ùüôÇ", "üëæü§ùüò¶", "üò∏üêæüôÇ"]
        
        if user[4] == 4:
            nick2 = morph_word(user2[0], user2[2], user2[4])[1]
        else:
            nick2 = morph_word(user2[0], user2[2], user2[4])[2]
    
    elif " —à–µ—é" in message.text.lower():
        user2 = await rp_check(message)
        if user2 == None:
            return 0
        if user2[0] in no_rp_list:
            return
        user = get_user(message.from_user.id)
        
        rpword = ["–ø–æ–∂–∞–ª–∏ —à–µ—é", "–∑–∞–¥—É—à–∏–ª", "–∑–∞–¥—É—à–∏–ª–∞", "–∑–∞–¥—É—à–∏–ª–æ", "–¥—É—à–∏—Ç"]
        rpemodz = ["üë§‚úäüòµ‚Äçüí´", "üë®‚úäüòµ‚Äçüí´", "üë©‚úäüòµ‚Äçüí´", "üëæü™¨üòµ", "üò∏‚úäüòµ‚Äçüí´"]
        
        if user[4] == 0:
            nick2 = morph_word(user2[0], user2[2], user2[4])[2]
        else:
            nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    else:
        return 0

    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–£–î–ê–†–ò–¢–¨
@dp.message_handler(commands=["—É–¥–∞—Ä–∏—Ç—å", "—É–µ–±–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp13(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    if user2[0] in no_rp_list:
        return
    user = get_user(message.from_user.id)
    
    wordrp = "—É–¥–∞—Ä–∏—Ç—å"
    
    if wordrp in message.text.lower():
        result = randint(0, 100)
        if result >= 80:
            rpword = ["—É–¥–∞—Ä–∏–ª–∏ –º–∏–º–æ", "—É–¥–∞—Ä–∏–ª –º–∏–º–æ", "—É–¥–∞—Ä–∏–ª–∞ –º–∏–º–æ", "–æ—Ç–ø—Ä–∞–≤–∏–ª–æ –≤ –∫–æ—Å–º–æ—Å", "–±—å—ë—Ç –º–∏–º–æ"]
            rpemodz = ["üë§üëä‚òÅÔ∏è", "üë®üëä‚òÅÔ∏è", "üë©üëä‚òÅÔ∏è", "üëæüåÄüåå", "üòºüëä‚òÅÔ∏è"]
            if user[4] == 3:
                nick2 = morph_word(user2[0], user2[2], user2[4])[3]
            else:
                nick2 = morph_word(user2[0], user2[2], user2[4])[1]
        
        else:
            rpword = ["—É–¥–∞—Ä–∏–ª–∏", "—É–¥–∞—Ä–∏–ª", "—É–¥–∞—Ä–∏–ª–∞", "–æ—Ç–ø—Ä–∞–≤–∏–ª–æ –≤ –∫–æ—Å–º–æ—Å", "–±—å—ë—Ç"]
            rpemodz = ["üë§üëäüòµ", "üë®üëäüòµ", "üë©üëäüòµ", "üëæüåÄüåå", "üòºüëäüòµ‚Äçüì¶"]
            nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    else:
        
        wordrp = "—É–µ–±–∞—Ç—å"
        if wordrp in message.text.lower():
    
            result = randint(0, 100)
            if result >= 80:
                rpword = ["—É–µ–±–∞–ª–∏ –º–∏–º–æ", "—É–µ–±–∞–ª –º–∏–º–æ", "—É–µ–±–∞–ª–∞ –º–∏–º–æ", "–æ—Ç–ø—Ä–∞–≤–∏–ª–æ –≤ –Ω–µ–±—ã—Ç–∏—ë", "–≤—ä—ë–±—ã–≤–∞–µ—Ç –º–∏–º–æ"]
                rpemodz = ["üë§üëä‚òÅÔ∏è", "üë®üëä‚òÅÔ∏è", "üë©üëä‚òÅÔ∏è", "üëæüåÄ„Äå„ÄÄ„Äç", "üòºüëä‚òÅÔ∏è"]
                if user[4] == 3:
                    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
                else:
                    nick2 = morph_word(user2[0], user2[2], user2[4])[1]
            else:
                rpword = ["—É–µ–±–∞–ª–∏", "—É–µ–±–∞–ª", "—É–µ–±–∞–ª–∞", "–æ—Ç–ø—Ä–∞–≤–∏–ª–æ –≤ –Ω–µ–±—ã—Ç–∏—ë", "–≤—ä—ë–±—ã–≤–∞–µ—Ç"]
                rpemodz = ["üë§üëäüòµ‚Äçüí´", "üë®üëäüòµ‚Äçüí´", "üë©üëäüòµ‚Äçüí´", "üëæüåÄ„Äå„ÄÄ„Äç", "üòºüëäüòµ‚Äçüí´"]
                if user[4] == 4:
                    nick2 = morph_word(user2[0], user2[2], user2[4])[2]
                else:
                    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    
    replic = get_replic(message.text)
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–ö–£–°–¨
@dp.message_handler(commands=["–∫—É—Å—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp12(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["—Å–¥–µ–ª–∞–ª–∏ –∫—É—Å—å", "—Å–¥–µ–ª–∞–ª –∫—É—Å—å", "–ø–æ–¥–∞—Ä–∏–ª–∞ –∫—É—Å—å", "–ø—Ä–æ–Ω–∑–∏–ª–æ", "–∫—É—Å—å —Ü–µ–ª–∏–∫–æ–º"]
    rpemodz = ["üëΩü¶∑üôÉ", "üßõ‚Äç‚ôÇÔ∏èü´ÇüôÉ", "üßõ‚Äç‚ôÄÔ∏èü´¶üôÉ", "üëæ‚ö†Ô∏è‚ò†Ô∏è", "üò∏ü©∏üôÉ"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    if user[4] == 3 or user[4] == 4:
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    else:
        nick2 = morph_word(user2[0], user2[2], user2[4])[2]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–ü–û–¢–†–û–ì–ê–¢–¨
@dp.message_handler(commands=["–ø–æ—Ç—Ä–æ–≥–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp11(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–ø–æ—Ç—Ä–æ–≥–∞–ª–∏", "–ø–æ—Ç—Ä–æ–≥–∞–ª", "–ø–æ—Ç—Ä–æ–≥–∞–ª–∞", "–ø–æ—Ç—Ä–æ–≥–∞–ª–æ", "—Ç—Ä–æ–≥–∞–µ—Ç-–º—è—É"]
    rpemodz = ["üë§üëâüòï", "üë®üëâüòï", "üë©üëâüòï", "üëæü™¨üòë", "üò∏üëâüòä"]
    replic = get_replic(message.text)

    if user2[4] == 1:
        rpemodz = ["üë§ü´¥ü•öü•ö", "üë®ü´¥ü•öü•ö", "üë©ü´¥ü•öü•ö", "üëæü´¥ü•öü•ö", "üò∏ü´¥ü•öü•ö"]
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–°–ï–ö–°
@dp.message_handler(commands=["—Å–µ–∫—Å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp10(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–¥–µ–ª–∞–ª–∏ —Å–µ–∫—Å —Å", "–¥–µ–ª–∞–ª —Å–µ–∫—Å —Å", "–¥–µ–ª–∞–ª–∞ —Å–µ–∫—Å —Å", "–¥–µ–ª–∞–ª–æ [–¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã] —Å", "–¥–µ–ª–∞–µ—Ç [–º—è—É] —Å"]
    rpemodz = ["üë§üçìüòä", "üë®üçìüòä", "üë©üçìüòä", "üëæ‚ò£Ô∏èüòµ‚Äç", "üêàüçãüò≤"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[4]
    
    msg_info = await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    
    eight_years(message.chat.id, user, user2, msg_info, True)

#–ü–û–ì–õ–ê–î–ò–¢–¨
@dp.message_handler(commands=["–ø–æ–≥–ª–∞–¥–∏—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp9(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–ø–æ–≥–ª–∞–¥–∏–ª–∏", "–ø–æ–≥–ª–∞–¥–∏–ª", "–ø–æ–≥–ª–∞–¥–∏–ª–∞", "–ø–æ–≥–ª–∞–¥–∏–ª–æ", "–ø–æ–≥–ª–∞–∂–∏–≤–∞–µ—Ç—Å—è –æ–±"]
    rpemodz = ["üë§ü´≥üòå", "üë®ü´≥üòå", "üë©ü´≥üòå", "üëæü´≥üò®", "üò∫ü¶µüòå"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–¢–†–ê–•–ù–£–¢–¨
@dp.message_handler(commands=["—Ç—Ä–∞—Ö–Ω—É—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp8(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    

    result = randint(0, 100)
    if result >= 80:
        ms = False
        rpword = ["—É–±–µ–∂–∞–ª–∏ –≤ —É–∂–∞—Å–µ –æ—Ç", "—É–±–µ–∂–∞–ª –≤ —É–∂–∞—Å–µ –æ—Ç", "—É–±–µ–∂–∞–ª–∞ –≤ —É–∂–∞—Å–µ –æ—Ç", "—Ä–µ—à–∏–ª–æ –æ–±–æ–π—Ç–∏ —Å—Ç–æ—Ä–æ–Ω–æ–π", "—É–±–µ–≥–∞–µ—Ç –≤ —É–∂–∞—Å–µ –æ—Ç"]
        rpemodz = ["üë§üò±", "üë®üèÉ‚Äç‚ôÇÔ∏è", "üë©üèÉ‚Äç‚ôÄÔ∏è", "üëæüò±üåå", "üôÄüì¶"]
        if user[4] == 3:
            nick2 = morph_word(user2[0], user2[2], user2[4])[3]
        else:
            nick2 = morph_word(user2[0], user2[2], user2[4])[1]
    
    else:
        ms = True
        rpword = ["—Ç—Ä–∞—Ö–Ω—É–ª–∏", "—Ç—Ä–∞—Ö–Ω—É–ª", "—Ç—Ä–∞—Ö–Ω—É–ª–∞", "—Ç—Ä–∞—Ö–Ω—É–ª–æ", "—Ç—Ä–∞—Ö–∞–µ—Ç"]
        rpemodz = ["üë§üå∂üòë", "üë®üå∂üòë", "üë©üå∂üòë", "üëæüîû‚ò†", "üòΩüîûüòë"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    replic = get_replic(message.text)
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    
    msg_info = await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    if ms == True:
        eight_years(message.chat.id, user, user2, msg_info, True)

#–í–´–ï–ë–ê–¢–¨
@dp.message_handler(commands=["–≤—ã–µ–±–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp7(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return

    user2 = await rp_check(message)
    if user2 == None:
        return 0
    if user2[0] in no_rp_list:
        return
    user = get_user(message.from_user.id)
    
    result = randint(0, 100)
    if result >= 80:
        ms = False
        rpword = ["—É–±–µ–∂–∞–ª–∏ –≤ —É–∂–∞—Å–µ –æ—Ç", "—É–±–µ–∂–∞–ª –≤ —É–∂–∞—Å–µ –æ—Ç", "—É–±–µ–∂–∞–ª–∞ –≤ —É–∂–∞—Å–µ –æ—Ç", "—Ä–µ—à–∏–ª–æ –æ–±–æ–π—Ç–∏ —Å—Ç–æ—Ä–æ–Ω–æ–π", "—É–±–µ–≥–∞–µ—Ç –≤ —É–∂–∞—Å–µ –æ—Ç"]
        rpemodz = ["üë§üò±", "üë®üèÉ‚Äç‚ôÇÔ∏è", "üë©üèÉ‚Äç‚ôÄÔ∏è", "üëæüò±üåå", "üôÄüì¶"]
        if user[4] == 3:
            nick2 = morph_word(user2[0], user2[2], user2[4])[3]
        else:
            nick2 = morph_word(user2[0], user2[2], user2[4])[1]
    else:
        ms = True
        rpword = ["–≤—ã–µ–±–∞–ª–∏", "–≤—ã–µ–±–∞–ª", "–≤—ã–µ–±–∞–ª–∞", "–≤—ã–µ–±–∞–ª–æ", "–µ–±—ë—Ç —Å –∫–æ–Ω—Ü–∞–º–∏"]
        rpemodz = ["üë§üå∂üòµ", "üë®üå∂üòµ", "üë©üå∂üòµ", "üëæüå∂‚ò†Ô∏è", "üòΩüå∂üòµ"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    replic = get_replic(message.text)
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    msg_info = await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    if ms == True:
        eight_years(message.chat.id, user, user2, msg_info, True)


#–ò–ó–ù–ê–°–ò–õ–û–í–ê–¢–¨
@dp.message_handler(commands=["–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp6(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0
    if user2[0] in no_rp_list:
        return
    user = get_user(message.from_user.id)
    
    result = randint(0,100)
    if result < 80:
        ms = True
        rpword = ["–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–ª–∏", "–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–ª", "–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–ª–∞", "–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–ª–æ", "–Ω–∞—Å–∏–ª—É–µ—Ç"]
        rpemodz = ["üë§üîûüò£", "üë®üîûüò£", "üë©üîûüò£", "üëæüîû‚ò†Ô∏è", "üòºüîûüò£"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    else:
        ms = False
        rpword = ["–±—ã–ª–∏ –∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω—ã", "–±—ã–ª –∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω", "–±—ã–ª–∞ –∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∞", "–±—ã–ª–æ –∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–æ", "–Ω–∞—Å–∏–ª—É–µ—Çc—è"]
        rpemodz = ["üòéüîûüë§", "üòéüîûüë®", "üòéüîûüë©", "üòéüîûüëæ", "üòéüîûüôÄ"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[4]
    
    replic = get_replic(message.text)
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    msg_info = await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")
    if ms == True:
        eight_years(message.chat.id, user, user2, msg_info, False)
    else:
        eight_years(message.chat.id, user2, user, msg_info, True)

#–ü–ù–£–¢–¨
@dp.message_handler(commands=["–ø–Ω—É—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp5(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return


    result = randint(0, 100)
    if result >= 80:
        rpword = ["–ø–Ω—É–ª–∏ –∫–∞–º–µ–Ω—å, –∞ –Ω–µ", "–ø–Ω—É–ª –∫–∞–º–µ–Ω—å, –∞ –Ω–µ", "–ø–Ω—É–ª–∞ –∫–∞–º–µ–Ω—å, –∞ –Ω–µ", "–ø–Ω—É–ª–æ –∫–∞–º–µ–Ω—å, –∞ –Ω–µ", "–ø–∏–Ω–∞–µ—Ç-–º—è—É –∫–∞–º–µ–Ω—å, –∞ –Ω–µ"]
        rpemodz = ["üë§üëü‚Üíü™®", "üë®üëû‚Üíü™®", "üë©ü•ø‚Üíü™®", "üëæü¶µ‚Üíü™®", "üòæü¶µ‚Üíü™®"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    else:
        rpword = ["–ø–Ω—É–ª–∏", "–ø–Ω—É–ª", "–ø–Ω—É–ª–∞", "–ø–Ω—É–ª–æ", "–ø–∏–Ω–∞–µ—Ç-–º—è—É"]
        rpemodz = ["üë§üëü‚Üíüòñ", "üë®üëû‚Üíüòñ", "üë©ü•ø‚Üíüòñ", "üëæü¶µ‚Üíüåå", "üòºü¶µ‚Üíüì¶"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    replic = get_replic(message.text)
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–ö–£–°–ù–£–¢–¨
@dp.message_handler(commands=["–∫—É—Å–Ω—É—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp4(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–∫—É—Å–Ω—É–ª–∏", "–∫—É—Å–Ω—É–ª", "–∫—É—Å–Ω—É–ª–∞", "–æ–±—É—á–∏–ª–æ –≤–æ—Ä–∞—Ä–µ—Ñ–∏–ª–∏–∏", "—Ü–∞—Ä–∞–ø–∫–∞–µ—Ç"]
    rpemodz = ["ü¶áüòô", "üßõüòô", "üßõ‚Äç‚ôÄÔ∏èüòô", "üëæ‚õ©üëª", "üòΩü©∏üò•"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–£–ö–£–°–ò–¢–¨
@dp.message_handler(commands=["—É–∫—É—Å–∏—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp3(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["—É–∫—É—Å–∏–ª–∏", "—É–∫—É—Å–∏–ª", "—É–∫—É—Å–∏–ª–∞", "–∑–∞–∂–µ–≤–∞–ª–æ", "–Ω–∞–¥–∫—É—Å—ã–≤–∞–µ—Ç"]
    rpemodz = ["ü©∏ü¶á", "ü©∏üßõ", "ü©∏üßõ‚Äç‚ôÄÔ∏è", "üëæüçñ‚ò†Ô∏è", "üòºü•©üò≠"]
    replic = get_replic(message.text)

    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–û–ë–ù–Ø–¢–¨
@dp.message_handler(commands=["–æ–±–Ω—è—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp2(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    user2 = await rp_check(message)
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    
    rpword = ["–æ–±–Ω—è–ª–∏", "–æ–±–Ω—è–ª", "–æ–±–Ω—è–ª–∞", "–æ–∫—É—Ç–∞–ª–æ —â—É–ø–∞–ª—å—Ü–∞–º–∏", "–æ–±–Ω–∏–º–∞–µ—Ç"]
    rpemodz = ["üë§ü´Ç", "ü§ó", "ü§ó", "üëæü§óü´Å", "üò∫ü§ó"]
    replic = get_replic(message.text)

    if user2[4] != 2:
        rpemodz = ["üë§ü´Ç", "üë®ü´Ç", "ü§ó", "üëæü§óü´Å", "üò∫ü§ó"]
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")

#–£–ë–ò–¢–¨
@dp.message_handler(commands=["—É–±–∏—Ç—å"], commands_prefix="/!.") #C–∞–º–∞ –†–ü –∫–æ–º–∞–Ω–¥–∞
async def rp1(message: types.Message):
    funny = get_funny(message)
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return

    user2 = await rp_check(message)
    
    if user2 == None:
        return 0

    user = get_user(message.from_user.id)
    if user2[0] in no_rp_list:
        return
    

    result = randint(0, 100)
    if result >= 80:
        rpword = ["–±—ã–ª–∏ –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã", "–±—ã–ª –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω", "–±—ã–ª–∞ –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω–∞", "–±—ã–ª–æ –∑–∞–ø–µ—á–∞—Ç–∞–Ω–æ", "–∑–∞—Ç–∏—Å–∫–∏–≤–∞–µ—Ç—Å—è"]
        rpemodz = ["üë§‚öîÔ∏èüöì", "üë®‚Äçü¶≤ü™ìüöì", "üë©‚Äçü¶≤üî™üöì", "üëæü™¨üîØ", "üê±ü§ó"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[4]
    else:
        rpword = ["—É–±–∏–ª–∏", "—É–±–∏–ª", "—É–±–∏–ª–∞", "—É–±–∏–ª–æ", "—É–±–∏–≤–∞–µ—Ç"]
        rpemodz = ["üë§‚öîÔ∏èüíÄ", "üë®ü™ì‚ò†Ô∏è", "üë©üî™‚ö∞Ô∏è", "üëæü™¨‚ö±Ô∏è", "üò∏üß®ü™¶"]
        nick2 = morph_word(user2[0], user2[2], user2[4])[3]
    
    replic = get_replic(message.text)
    
    action = rpword[user[4]]
    rpemodz = rpemodz[user[4]]
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(user[2])}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>{html.escape(replic)}", parse_mode="html")


