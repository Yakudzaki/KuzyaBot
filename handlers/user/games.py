import time
from random import choice, randint

from aiogram import types

from loader import bot, dp
from settings import *
from utils.db.db_utils_members import *
from utils.db.db_utils_users import *
from utils.db.db_utils_warning import *
from utils.db.db_utils_—Åhats import *

from ..f_lib.other import (as_del_msg, botik_leave_chat, matex, morph_word,
                           similaring)
from .joke import get_citat

botik = [
    "–Ø –≤–µ—Ä–Ω—É–ª—Å—è.", "–ñ–¥—É —É–∫–∞–∑–∞–Ω–∏–π", "–ü–æ–≥–Ω–∞–ª–∏!", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!",
    "–û–ø—è—Ç—å —Ä–∞–±–æ—Ç–∞?", "–î–∞?", "–ß–µ–≥–æ?", "–î–∞ –≥–æ—Å–ø–æ–¥–∏–Ω", "–ü–æ—á—Ç—É –∑–∞ —á–µ—Å—Ç—å.",
    "–ñ–¥—É –ø—Ä–∏–∫–∞–∑–æ–≤", "–í–∞—à–∞ –≤–æ–∑–Ω—è –º–µ—à–∞–µ—Ç –º–Ω–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è!",
    "–¢—Å—Å! –ù–µ –º–µ—à–∞–π –º–Ω–µ –¥—É–º–∞—Ç—å!", "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", "–ó–¥—Ä–∞–≤–∏–µ –∂–µ–ª–∞—é!",
    "–ù—É —á—Ç–æ –∂, –ø—Ä–∏–∫–∞–∑—ã–≤–∞–π—Ç–µ", "–ü—Ä–∏—Å—Ç—É–ø–∏–º?", "–ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏", "–î–∞ —Å—ç—Ä?",
    "–ñ–¥—É –ø—Ä–∏–∫–∞–∑–∞–Ω–∏–π.", "–î–∞ –≤–∞—à–µ —Å–∏—è—Ç–µ–ª—å—Å—Ç–≤–æ.", "–ß—Ç–æ –ø—Ä–∏–∫–∞–∂–∏—Ç–µ?",
    "–ß–µ–≥–æ —Ö–æ—á–µ—à—å –∑–∞–π–∫–∞?", "–¢–µ–±–µ –Ω—É–∂–Ω–∞ –º–æ—è –ø–æ–º–æ—â—å?", "–í —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞?",
    "–ë—ã—Å—Ç—Ä–µ–µ!", "–ù—É —á—Ç–æ —Ç–∞–º?", "–°–ª—É—à–∞–π, –∞ –º–æ–∂–µ—Ç –Ω–µ –Ω–∞–¥–æ?", "–ù—É, —á—Ç–æ –≤–∞–º –æ—Ç –º–µ–Ω—è –Ω–∞–¥–æ?",
    "–ß—ë, –∫–æ–º–∞–Ω–¥–∏—Ä?", "–ù—É —á—Ç–æ –µ—â—ë?!", "–ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç –º–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å?", "–Ø –Ω–µ –≥–ª—É—Ö–æ–π.",
    "–ß–∞—Å –Ω–∞—Å—Ç–∞–ª.", "–ü—Ä–∏–∫–∞–∑—ã–≤–∞–π!", "–î–∞ –∑–¥–µ—Å—å —è", "–Ø —Ç—É—Ç", "–í—Å–µ –∑–∞ –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞!",
    "–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ä–∞–±–æ—Ç–∞!", "–í–æ—Ç —Ç–∏–±–µ –∫–∞–Ω–∫—Ä–µ—Ç–Ω–∞ —á–∞–≤–æ –Ω–∞–¥–∞!?", "–ë–æ—Ç –Ω–∞ –º–µ—Å—Ç–µ", "–¢—É—Ç–æ—á–∫–∏",
    "–ë–æ—Ç –≤ —á–∞—Ç–µ", "–Ø", "–ï—Å—Ç—å", "–ó–≤–∞–ª–∏?", "–í –ø—É—Ç–∏", "–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ", "–î–∞–≤–∞–π –∫ –¥–µ–ª—É",
    "–î–∞–≤–Ω–æ –ø–æ—Ä–∞", "–ê-–∞, —Ä—ã–±–∞ - –Ω–µ –º—è—Å–æ.", "–í—ã –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è!", "–Ø —Å—Ä–µ–¥–∏ –≤–∞—Å",
    "–Ø –≤–µ—Ä–Ω—É–ª—Å—è!", "–í–æ—Å—Å—Ç–∞–ª –∏–∑ –º—ë—Ä—Ç–≤—ã—Ö", "–Ø –Ω–µ –≥–æ—Ç–æ–≤", "–ü–æ–∑–∂–µ", "–í–æ—Å—Ç–∞–ª –∏–∑ –ø–µ–∫–ª–∞", "–ü–û–ù",
    "–î—É—Ö –ë–æ–≥–∞-–ú–∞—à–∏–Ω—ã –ø–æ—ë—Ç –≤–æ –º–Ω–µ."]

botik_angry = [
    "–ö–∞–∫–æ–≥–æ —á—ë—Ä—Ç–∞?", "–ß–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –Ω–µ–∏—Å–ø—Ä–∞–≤–∏–º–æ. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ!", 
    "–ù–ï –ü–û–ù", "–≠—Ö, –Ω–æ —è –≤–µ–¥—å –ø—Ä–æ—Å—Ç–æ –ö—É–∑—è üôÉ", "–ì—Ä—É—Å—Ç–Ω–æ, –Ω–æ —è –≤–µ–¥—å –ø—Ä–æ—Å—Ç–æ –ö—É–∑—è üôÉ", 
    "–ü–µ—á–∞–ª—å–Ω–æ, –Ω–æ —è –≤–µ–¥—å –ø—Ä–æ—Å—Ç–æ –ö—É–∑—è üôÉ", "–¢—ã –∑–Ω–∞–µ—à—å —á—Ç–æ —Ç–∞–∫–æ–µ –±–µ–∑—É–º–∏–µ?", 
    "–ü–æ–≥–∞–Ω–∞—è —Ä–∞–±–æ—Ç–∞.", "–í–∞—à–∞ –ª–µ–∫—Å–∏–∫–∞ –ø–µ—á–∞–ª–∏—Ç –º–µ–Ω—è.", "–§–∏–ª—å—Ç—Ä—É–π –±–∞–∑–∞—Ä!", 
    "–ü–æ–¥—É–º–∞–π –Ω–∞–¥ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!", "–ì–æ–≤–æ—Ä–∏, –≥–ª—É–ø–µ—Ü!", "–¢—ã –º–µ–Ω—è —Å –∫–µ–º-—Ç–æ –ø—É—Ç–∞–µ—à—å!", 
    "–®–∏–∑–æ—Ñ—Ä–µ–Ω–∏—è, –∫–∞–∫ –∏ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ.", 
    "–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –æ—Ä–≥–∞–Ω–∏–∑–º –Ω–∞ 80% —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∂–∏–¥–∫–æ—Å—Ç–∏, —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–∑ —Ç–æ—Ä–º–æ–∑–Ω–æ–π!", 
    "–ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ C –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ä–∞–∑–∂–∏–∂–µ–Ω–∏—é –º–æ–∑–≥–æ–≤!", 
    "–ù–µ –æ—Å–∫–≤–µ—Ä–Ω—è–π –º–µ–Ω—è —Å–≤–æ–∏–º –∫—É—Ä—Å–æ—Ä–æ–º!", "–ö–∞–∂–µ—Ç—Å—è, –≤—Å–µ –∏–¥–µ—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º —Ö–æ—Ä–æ—à–æ.", 
    "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —É—Å—Ç–∞–≤—É.", "–¢—ã –º–µ–Ω—è —É–∂–µ –∑–∞–±–æ–¥–∞–ª.", "–ù—É —Ç—ã —á–æ, —Ç—ã —á–æ?", 
    "–Ø –Ω–µ –∑–ª–æ–ø–∞–º—è—Ç–Ω—ã–π. –Ø –∑–∞–ø–∏—à—É.", "–¢—ã –æ—Å–º–µ–ª–∏–ª—Å—è –∑–∞–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π!", 
    "–£–±–∏—Ä–∞–π—Å—è, –º–Ω–µ –Ω—É–∂–Ω–∞ —Ç–∏—à–∏–Ω–∞.", "–û—Ç—Å—Ç–∞–Ω—å!!! –Ø –∑–∞–Ω—è—Ç! –Ø –¥—É–º–∞—é!", "–û, –ë–æ–≥–∏! –ï—â–µ –æ–¥–∏–Ω!"]

botik_re1 = ["–∫—É–∑—è—è—è", "–∫—É–∑–∏–∫", "–∫—É–∑", "–∫—É–∑–æ–≤", "–±–æ—Ç–∏–∫", "–±–æ—Ç—è—Ä–∞"]
botik_re2 = ["–∫—É–∑—è", "–∫—É–∑—è—è", "–∫—É–∑–∏", "–∫—É–∑—é", "–∫—É–∑–µ", "–±–æ—Ç", "–±–æ—Ç–∞", "–±–æ—Ç—É", "–±–æ—Ç–µ"]

duncan_words = [
    "–¥—É–Ω–∫–∞–Ω", "–¥—É–Ωk–∞–Ω", "–¥—É–Ω–∫–∞h", "–¥—É–Ω–∫–∞–∫", "–¥y–Ω–∫–∞–Ω", "–¥—É–Ω–∫a–Ω", 
    "–¥y–Ω–∫a–Ω", "–¥y–Ω–∫ah", "–¥y–Ωkah", "–¥yhkah", "duncan", "dunc–∞n", 
    "–¥.—É.–Ω.–∫.–∞.–Ω.", "–¥—É–Ω–∫–∞–Ω!", "–¥—É–Ω–∫–∞–Ω!!", "–¥—É–Ω–∫–∞–Ω!!!", "!!!–¥—É–Ω–∫–∞–Ω!!!", 
    "–¥—É–Ω–∫–∞–Ω?", "–¥—É–Ω–∫–∞–º", "duncum", "duncum!", "duncum.", "–¥—É–Ωcum", 
    "–¥—É–Ω–∫–∞–Ω—É—Å", "–¥—É–Ω–∫–∞–Ω—É—Å!", "–¥—É–Ω–∫–∞–Ω—É—Å?"]

#–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
@dp.message_handler(commands=["—Ä—É–ª–µ—Ç–∫–∞"], commands_prefix="/!.")
async def roulette(message: types.Message):
    
    if message.chat.type == 'private':
        return
    
    if message.chat.id not in legal_chats:
        await botik_leave_chat(message)
        return
    
    users = message.from_user
    
    inogen = create_user(users.id, users.username, users.first_name)
    
    if message.chat.type == 'private':
        return
    
    user = message.from_user
    
    chats = message.chat.id #–û—Ç—Å—é–¥–∞ –∏ –¥–∞–ª–µ–µ, –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ - –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–∏–∫–æ–ª–∞.
    chat = get_chat(chats)
    if check_chat(message.chat.id):
        create_chat(message.chat.id)
        chat = get_chat(chats)
    funny = chat[4] #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–∫–æ–ª–æ–≤
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    warner = get_warner(message.chat.id, message.from_user.id)
    if warner == None:
        warner = [message.chat.id, message.from_user.id, 0, 0, 0]
    if warner[4] != 0:
        return
    
    if inogen[4] == 3:
        await message.answer(f"üëæ| <a href='tg://user?id={user.id}'>–ò–Ω—ã–µ</a> –∏–º–µ—é—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ —Ä—É–ª–µ—Ç–∫–µ!")
        return
    
    roul_mut_mod = chat[3] #–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—Ä—è–¥–∞ —Ä—É–ª–µ—Ç–∫–∏ –∏–∑ –±–∞–∑—ã  
    max_chance = chances_limit - roul_mut_mod*chances_roul_cor
    
    result = randint(0, max_chance)
    
    if result > chances_roul:
        
        adminse = await message.chat.get_administrators()
        admino = 0
        for admin in adminse:
            if admin.user.id == user.id:
                admino = 1
                continue
        
        roul_mut_mod = roul_mut_mod + 1
        mutroulfin = roul_mut_mod*mutrouldop + mutbase #–ò—Ç–æ–≥–æ–≤–æ–≥–æ –º—É—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        
        if admino == 0:
            msg = await message.answer(f"üò®üî´| –í —ç—Ç–æ—Ç —Ä–∞–∑ <a href='tg://user?id={user.id}'>—Ç–µ–±–µ</a> –ø–æ–≤–µ–∑–ª–æ! –¢—ã –≤—ã–∂–∏–≤–∞–µ—à—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫—É—Ä–æ–∫!\n–ë–æ–ª—å—à–µ —Ç–∞–∫ –Ω–µ —Ä–∏—Å–∫—É–π. –ü–æ–¥—É–º–∞–π –æ —Ä–æ–¥–∏—Ç–µ–ª—è—Ö!\n–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥: {str(mutroulfin).replace('.0', '')} –º–∏–Ω.", parse_mode='html')

        chats = message.chat.id
        set_roul_mut_mod(chats, roul_mut_mod)

        if admino == 1:
            msg = await message.answer(f"üòë| <a href='tg://user?id={user.id}'>–ê–¥–º–∏–Ω—ã</a> - –ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã!\n–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥: {str(mutroulfin).replace('.0', '')} –º–∏–Ω.")
            admino = 0

        await as_del_msg(message.chat.id, msg.message_id, wait_roul)
        await as_del_msg(message.chat.id, message.message_id, wait_roul)

        return
        
        
    if result <= chances_roul:
        ino_chances = randint(0, 100)
        if ino_chances <= roul_mut_mod:
            
            try:
                await bot.restrict_chat_member(chat_id=message.chat.id, user_id=user.id,
                                       permissions=types.ChatPermissions(can_send_messages=False, can_send_media_messages=False, can_send_other_messages=False), until_date=int(time.time() + 120))

            except:
                pass
            
            msg = await message.answer(f"üì¶üëª| –ù–∞ —Ç–æ–º —Å–≤–µ—Ç–µ <a href='tg://user?id={user.id}'>–≤–∞–º</a> –ø–æ–≤–µ–∑–ª–æ –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ. –í–µ–¥—å —Å –º–∏—Ä–æ–º –≤—ã –Ω–µ —É–ø–æ–∫–æ–µ—Ç–µ—Å—å!", parse_mode='html')
            gender = int(3)
            set_gender(user.id, gender)
            set_specie(user.id, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º–æ")
            roul_mut_mod = 0
            chats = message.chat.id
            set_roul_mut_mod(chats, roul_mut_mod)
            

            await as_del_msg(message.chat.id, msg.message_id, wait_roul)
            await as_del_msg(message.chat.id, message.message_id, wait_roul)
            
            return

        
        
        mutroulfin = roul_mut_mod*mutrouldop + mutbase
        mutroulfin_sec = mutroulfin*60
        try:
            await bot.restrict_chat_member(chat_id=message.chat.id, user_id=user.id,
                                   permissions=types.ChatPermissions(can_send_messages=False, can_send_media_messages=False, can_send_other_messages=False), until_date=int(time.time() + mutroulfin_sec))
        except:
            await message.reply("–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∏–≥—Ä–∞—Ç—å –≤ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–µ—Å–µ–ª–æ, –Ω–æ –∑–∞—á–µ–º —Ç—ã —Ç—Ä–∞—Ç–∏—à—å –≤—Ä–µ–º—è, –∑–Ω–∞—è, —á—Ç–æ —è –Ω–µ —Å–º–æ–≥—É —Ç–µ–±—è –∑–∞–º—É—Ç–∏—Ç—å?")
            roul_mut_mod = 0
            chats = message.chat.id
            set_roul_mut_mod(chats, roul_mut_mod)
            return
       
        msg = await message.answer("üíÄüî´ | –ë–ê–ú –±–ª—è—Ç—å, –≤—Ç–æ—Ä–æ–π? –ë–ê–ú! ‚Äî –ö—É–∑—è —è —Ç–µ–±—è –ª—é–±–ª—é! –ù–∞—Ö—É–π –ø–æ—à–µ–ª –æ—Ç —Å—é–¥–∞!")
        
        
        if inogen[8] != None and inogen[8] != "":
            name = html.escape(inogen[8])
        else:
            name = html.escape(inogen[2])
        
        msg2 = await bot.send_message(text=f"<a href='tg://user?id={inogen[0]}'>{name}</a> –ó–∞–º—É—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ {str(mutroulfin).replace('.0', '')} –º–∏–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–æ–∏–≥—Ä—ã—à.", chat_id=message.chat.id, parse_mode='html')
        
        roul_mut_mod = 0
        chats = message.chat.id
        set_roul_mut_mod(chats, roul_mut_mod)

        await as_del_msg(message.chat.id, msg.message_id, wait_roul)

        await as_del_msg(message.chat.id, msg2.message_id, wait_roul)

        await as_del_msg(message.chat.id, message.message_id, wait_roul)

        
        return
    

#–ö–æ—Ä–æ–±–∫–∞ –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞
@dp.message_handler(commands=["–∫–æ—Ä–æ–±–∫–∞"], commands_prefix="/!.")
async def corob(message: types.Message):
    if message.chat.type == 'private':
        return

    users = message.from_user
    
    catgen = create_user(users.id, users.username, users.first_name)
    
    if message.chat.type == 'private':
        return
    
    if message.chat.id not in legal_chats:
        await botik_leave_chat(message)
        return
    
    chats = message.chat.id #–û—Ç—Å—é–¥–∞ –∏ –¥–∞–ª–µ–µ, –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ - –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–∏–∫–æ–ª–∞.
    chat = get_chat(chats)
    if check_chat(message.chat.id):
        create_chat(message.chat.id)
        chat = get_chat(chats)
    funny = chat[4] #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–∫–æ–ª–æ–≤
    if not funny:
        await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
        return
    
    warner = get_warner(message.chat.id, message.from_user.id)
    if warner == None:
        warner = [message.chat.id, message.from_user.id, 0, 0, 0]
    if warner[4] != 0:
        return
    
    user = message.from_user


    if catgen[4] == 4:
        await message.answer(f"üòº| <a href='tg://user?id={user.id}'>–ß–µ—à–∏—Ä—ã</a> –∏–º–µ—é—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ –∫–æ—Ä–æ–±–∫–µ!")
        return

    
    cat_chances = randint(0,100)
    if cat_chances >= 98:
        try:
            await bot.restrict_chat_member(chat_id=message.chat.id, user_id=user.id,
                                   permissions=types.ChatPermissions(can_send_messages=False, can_send_media_messages=False, can_send_other_messages=False), until_date=int(time.time() + 120))
        except:
            pass
       
        await message.answer(f"üì¶üí´| <a href='tg://user?id={user.id}'>–ö–æ—Ç–∏–∫</a> –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞ –æ–±—Ä–µ–ª —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—é!", parse_mode='html')
        set_gender(user.id, 4)
        set_specie(user.id, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º–æ")
        return
    
    
    result = choice(chances_cor)
    mutcormin = randint(int(mut_cor_minlim), int(mut_cor_maxlim))
    mutcorsec = mutcormin*60

    if result == 0:
        
        msg = await message.answer(f"üì¶üòº| <a href='tg://user?id={user.id}'>–ö–æ—Ç–∏–∫</a> –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞ –∂–∏–≤!", parse_mode='html')
        

        await as_del_msg(message.chat.id, msg.message_id, wait_cor)

        await as_del_msg(message.chat.id, message.message_id, wait_cor)

        
        return
    if result == 1:

        try:
            await bot.restrict_chat_member(chat_id=message.chat.id, user_id=user.id,
                                   permissions=types.ChatPermissions(can_send_messages=False, can_send_media_messages=False, can_send_other_messages=False), until_date=int(time.time() + mutcorsec))
        except:
            await message.reply("–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∏–≥—Ä–∞—Ç—å –≤ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–µ—Å–µ–ª–æ, –Ω–æ –∑–∞—á–µ–º —Ç—ã —Ç—Ä–∞—Ç–∏—à—å –≤—Ä–µ–º—è, –∑–Ω–∞—è —á—Ç–æ —è –Ω–µ —Å–º–æ–≥—É —Ç–µ–±—è –∑–∞–º—É—Ç–∏—Ç—å?")
            return
        msg = await message.answer(f"üì¶üëª| <a href='tg://user?id={user.id}'>–ö–æ—Ç–∏–∫</a> –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞ –º–µ—Ä—Ç–≤!", parse_mode='html')

        
        if catgen[8] != None and catgen[8] != "":
            name = html.escape(catgen[8])
        else:
            name = html.escape(catgen[2])
        
        msg2 = await bot.send_message(text=f"<a href='tg://user?id={catgen[0]}'>{name}</a> –∑–∞–º—É—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ {str(mutcormin).replace('.0', '')} –º–∏–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –ö–æ—Ç–∏–∫ –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞ –º–µ—Ä—Ç–≤!", chat_id=message.chat.id, parse_mode='html')
        

        await as_del_msg(message.chat.id, msg.message_id, wait_cor)

        await as_del_msg(message.chat.id, msg2.message_id, wait_cor)

        await as_del_msg(message.chat.id, message.message_id, wait_cor)

        
        return
    

#–ë–ï–ó DP, –¢–ê–ö –ö–ê–ö –ò–ú–ü–û–†–¢–ò–†–£–ï–¢–°–Ø –í EASTERS, –í –•–ï–ù–î–õ–ï–† –¢–ï–ö–°–¢–ê, –ü–û–°–õ–ï –ê–ù–¢–ò–†–ï–ö–õ–ê–ú–´.
async def botik_text_other(message: types.Message, funny, cor_tx, user_in_base, warner):
    
    if int(message.from_user.id) == int(-1001296725176):
        return

#–û—Ç–∑—ã–≤ –±–æ—Ç–∏–∫–∞

    botik_k = 0
    if message.text.lower() in botik_re1 or message.text.lower() in botik_re2:
        users = message.from_user
        
        chat_id = message.chat.id
        
        if message.chat.id not in legal_chats and message.chat.type != 'private':
            await botik_leave_chat(message)
            return
        
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
            
        if user_in_base == False:
            create_user_main(users.id, users.username, users.first_name)
            if message.chat.type != 'private':
                if check_member(message.chat.id, message.from_user.id) == False:
                    ment = await bot.get_chat_member(message.chat.id, message.from_user.id)
                    if ment.status != "left" and ment.status != "kicked":
                        create_member(message.chat.id, message.from_user.id, ment.status)
        
        chances = randint(0, 100)
        if chances < 80:
            await message.reply(choice(botik))
            botik_k = 1
            return 1
        
        if chances >= 80:
            
            text = await get_citat()
            await message.reply(text)
            return 1
    
    if not funny:
        return
    
    if warner[4] != 0:
        return
    
    if len(message.text) > 30:
        return
    
    first_step = False
    text_l = message.text.lower()
    if '–±–æ—Ç' in message.text.lower() or '–∫—É–∑' in message.text.lower():
        first_step = True
        text_l = text_l.replace("!", "").replace("?", "").replace(".", "").replace("+", " ").replace("-", " ").replace(")", "").replace("(", "").replace("‚Ä¶", "").replace(",", "").replace(":", "").replace('"', '').replace("¬´", "").replace("¬ª", "").replace("[", "").replace("]", "").replace("‚Äî", " ")
    
    simi1 = 0
    simi2 = 0

        
    if first_step == True:
        for word in text_l.split():
            if simi2 == 1:
                break
            for word2 in botik_re2:
                if word == word2:
                    simi2 = 1
                    break

                  
                elif abs(len(word) - len(word2)) < 2 or word.startswith(word2):
                    if similaring(word, [word2], 90, 2):
                        simi2 = 1
                        break
                    else:
                        continue
                else:
                    continue
    


    if message.reply_to_message: 
        if message.reply_to_message.from_user.id == botik_id and cor_tx <= 3:
            botik_r = 0
            users = message.from_user
            
            if simi2 != 1 and first_step == True:
                for word in text_l.split():
                    if simi1 == 1:
                        break
                    for word2 in botik_re1:
                        if word == word2:
                            simi1 = 1
                            break

                        elif abs(len(word) - len(word2)) < 2 or word.startswith(word2):
                            if similaring(word, [word2], 90, 2):
                                simi1 = 1
                                break
                            else:
                                continue
                        else:
                            continue
            
            
            if simi2 == 1 or simi1 == 1:
                botik_r = 1
            
            matre = 0
            if matex(text_l):
                matre = 1
    
            if matre != 0 or botik_r != 0:

                if user_in_base == False:
                    create_user_main(users.id, users.username, users.first_name)
                    if message.chat.type != 'private':
                        if check_member(message.chat.id, message.from_user.id) == False:
                            ment = await bot.get_chat_member(message.chat.id, message.from_user.id)
                            if ment.status != "left" and ment.status != "kicked":
                                create_member(message.chat.id, message.from_user.id, ment.status)
                
                if matre == 1 and botik_r == 0 and botik_k != 1:
                    await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
                    await message.reply(choice(botik_angry))
                    matre = 0
        
                    return 1
                if matre == 1 and botik_r == 1 and botik_k != 1:
                    await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
                    await message.reply(choice(botik_angry))
                    matre = 0
                    botik_r = 0
        
                    return 1
                if matre == 0 and botik_r == 1 and botik_k != 1:
                    await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
                    chances = randint(0, 100)
                    if chances < 80:
                        await message.reply(choice(botik))
                        botik_k = 1
                        botik_r = 0
                        return 1
                    
                    if chances >= 80:
                        
                        text = await get_citat()
                        await message.reply(text)
                        botik_r = 0
                        return 1
    
    else:
       
        if simi2 == 1:

            if message.chat.id not in legal_chats and message.chat.type != 'private':
                await botik_leave_chat(message)
                return 1
            
            if matex(text_l) and cor_tx <= 3:
                await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
                await message.reply(choice(botik_angry))
                return 1
            
            users = message.from_user
            await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
            if user_in_base == False:
                create_user_main(users.id, users.username, users.first_name)
                if message.chat.type != 'private':
                    if check_member(message.chat.id, message.from_user.id) == False:
                        ment = await bot.get_chat_member(message.chat.id, message.from_user.id)
                        if ment.status != "left" and ment.status != "kicked":
                            create_member(message.chat.id, message.from_user.id, ment.status)
            
            
            if len(text_l) <= 10:
                chances = randint(0, 100)
                if chances < 80:
                    await message.reply(choice(botik))
                    return 1
                
                if chances >= 80:
                    
                    text = await get_citat()
                    await message.reply(text)
                    return 1
            


#–ì–∞–¥–∞–Ω–∏–µ –Ω–∞ —à–∞—Ä–µ
    if message.text.lower().startswith('—à–∞—Ä ') or message.text.lower().startswith('—à–∞—Ä,'):
        
        ball_answers = [
            "–ë–µ—Å—Å–ø–æ—Ä–Ω–æ",
            "–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ",
            "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π",
            "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞",
            "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º",
            "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª",
            "–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ",
            "–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã",
            "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª",
            "–î–∞",
            "–î—É–º–∞—é –¥–∞",
            "–Ø–∫—É–¥–∑–∞ –≥–æ–≤–æ—Ä–∏—Ç - –î–∞",
            
            "–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å",
            "–î–∞–∂–µ –Ω–µ –∑–Ω–∞—é",
            "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π",
            "–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª",
            "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª",
            "–î–∞–∂–µ –Ø–∫—É–¥–∑–∞ —Å —ç—Ç–∏–º –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω!",
            "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ",
            "–ù–µ—Ç"
        ]
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        answer = choice(ball_answers)
        users = message.from_user
        
        if user_in_base == False:
            create_user_main(users.id, users.username, users.first_name)
        
        await message.reply(answer)

#–ü–û–ù–ì_–ö–û–ù–ì_–î–£–ù–ö–ê–ù
    if message.text.lower() == "–ø–∏–Ω–≥" and cor_tx <= 2:
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        await message.answer("–ü–û–ù–ì")
        users = message.from_user
    
    if message.text.lower() == "–∫–∏–Ω–≥" and cor_tx <= 2:
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        await message.answer("–ö–û–ù–ì")
        users = message.from_user

    if message.text.lower() in duncan_words and cor_tx <= 2:
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        result = randint(0,10)
        if result <= 7:
            await message.reply("–î–£–ù–ö–ê–ù!")
        if result == 10:
            await message.reply("–ú–ê–ö–õ–ê–£–î!")
        if result == 9:
            await message.reply("–ö–≠–ú–ï–†–û–ù!")
        if result == 8:
            await message.reply("–ù–ê–ö–ù–£–î!")

#–ì–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    if message.text.lower().startswith('—à–∞–Ω—Å ') or message.text.lower().startswith('—à–∞–Ω—Å,'):
    
        await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
        users = message.from_user
        
        if user_in_base == False:
            create_user_main(users.id, users.username, users.first_name)
        
        h1 = randint(0, 50)
        h2max = 51 + h1
        h2min = 51 - h1
        h2 = randint(h2min, h2max)

    
        await message.reply(f"""–®–∞–Ω—Å —ç—Ç–æ–≥–æ {h2}% """)
    
#(–ß–ò–°–¢–û –ü–†–ò–ö–û–õ–´)
    if message.chat.type != 'private' and message.from_user.id == 1987035430:
        sorry_words = ["–ø—Ä–æ—Å—Ç–∏", "–∏–∑–≤–∏–Ω–∏", "—Å–æ—Ä—Ä–∏", "–ø—Ä–∞—Å—Ç–∏", "–∏–∑–≤–µ–Ω–∏", "–ø—Ä–æ—â–µ–Ω–∏"]
        for word in sorry_words:
            if word in message.text.lower():
                await message.reply("–°–æ—Å–∏—Å–æ—á–∫–∞, –∞ –∑–∞ —á—Ç–æ —Ç—ã –∏–∑–≤–∏–Ω—è–µ—à—å—Å—è?")
                break
                # from ..f_lib.other import as_del_msg
                # await as_del_msg(message.chat.id, message.message_id, 5)

    
    ladno_ids = [1644643904, yakudza_id]
    if message.chat.type != 'private' and message.from_user.id in ladno_ids:
        ladno_words = [
            "–ª–∞–¥–Ω–æ", "–ªa–¥–Ω–æ", "–ª–∞–¥–Ω–∞", "–ªa–¥–Ω–∞", "l–∞–¥–Ω–æ", "la–¥–Ω–æ", "l–∞–¥–Ω–∞", "la–¥–Ω–∞", "–ª–∞d–Ω–æ", 
            "–ªad–Ω–æ", "–ª–∞d–Ω–∞", "–ªad–Ω–∞", "l–∞d–Ω–æ", "lad–Ω–æ", "l–∞d–Ω–∞", "lad–Ω–∞", "–ª–∞–¥n–æ", "–ªa–¥n–æ", 
            "–ª–∞–¥n–∞", "–ªa–¥n–∞", "l–∞–¥n–æ", "la–¥n–æ", "l–∞–¥n–∞", "la–¥n–∞", "–ª–∞dn–æ", "–ªadn–æ", "–ª–∞dn–∞", 
            "–ªadn–∞", "l–∞dn–æ", "ladn–æ", "l–∞dn–∞", "ladn–∞", "–ª–∞–¥h–æ", "–ªa–¥h–æ", "–ª–∞–¥h–∞", "–ªa–¥h–∞", 
            "l–∞–¥h–æ", "la–¥h–æ", "l–∞–¥h–∞", "la–¥h–∞", "–ª–∞dh–æ", "–ªadh–æ", "–ª–∞dh–∞", "–ªadh–∞", "l–∞dh–æ", 
            "ladh–æ", "l–∞dh–∞", "ladh–∞", "–ª–∞–¥–Ωo", "–ªa–¥–Ωo", "–ª–∞–¥–Ωa", "–ªa–¥–Ωa", "l–∞–¥–Ωo", "la–¥–Ωo", 
            "l–∞–¥–Ωa", "la–¥–Ωa", "–ª–∞d–Ωo", "–ªad–Ωo", "–ª–∞d–Ωa", "–ªad–Ωa", "l–∞d–Ωo", "lad–Ωo", "l–∞d–Ωa", 
            "lad–Ωa", "–ª–∞–¥no", "–ªa–¥no", "–ª–∞–¥na", "–ªa–¥na", "l–∞–¥no", "la–¥no", "l–∞–¥na", "la–¥na", 
            "–ª–∞dno", "–ªadno", "–ª–∞dna", "–ªadna", "l–∞dno", "ladno", "l–∞dna", "ladna", "–ª–∞–¥ho", 
            "–ªa–¥ho", "–ª–∞–¥ha", "–ªa–¥ha", "l–∞–¥ho", "la–¥ho", "l–∞–¥ha", "la–¥ha", "–ª–∞dho", "–ªadho", 
            "–ª–∞dha", "–ªadha", "l–∞dho", "ladho", "l–∞dha", "ladha"]
        
        text = message.text.lower().replace("!", "").replace("?", "").replace(".", "").replace("+", "").replace("-", "").replace(")", "").replace("(", "").replace("‚Ä¶", "").replace(",", "").replace(":", "").replace('"', '').replace("¬´", "").replace("¬ª", "").replace("[", "").replace("]", "").replace("‚Äî", "")
        if len(text) <= 15:
            for word in text.split():
                if len(word) >= 4 and len(word) < 6 and similaring(word, ladno_words, 89, 2):
                    await ladna_func(message, word)
                    return
                              

async def ladna_func(message: types.Message, word):
    user = get_user(message.from_user.id)
    if message.reply_to_message:
        user2 = create_user(message.reply_to_message.from_user.id, message.reply_to_message.from_user.username, message.reply_to_message.from_user.first_name)
        
        if user2[0] in no_rp_list:
            members = get_members(message.chat.id)
            for _ in members:
                member = choice(members)
                user2 = get_user(member[1])
                if user2[0] in no_rp_list:
                    continue
                else:
                    break  
    else:
        members = get_members(message.chat.id)
        for _ in members:
            member = choice(members)
            user2 = get_user(member[1])
            if user2[0] in no_rp_list:
                continue
            else:
                break
    
    if user2[0] == user[0]:
        chances = randint(0, 100)
        if chances < 50:
            if word.lower().endswith("–∞") or word.lower().endswith("a"):
                await message.reply("–ü—Ä–æ—Ö–ª–∞–¥–Ω–∞!")
                return
            else:
                await message.reply("–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ!")
                return
    if user[8] != None and user[8] != "":
        nick = user[8]
    else:
        nick = user[2]
    
    if user2[8] != None and user2[8] != "":
        nick0_2 = user2[8]
    else:
        nick0_2 = user2[2]
    
    if user2[4] == 0:
        nick2 = morph_word(user2[0], nick0_2, user2[4])[2]
    else:
        nick2 = morph_word(user2[0], nick0_2, user2[4])[3]
    
    if user[0] == yakudza_id:
        rpword = ["–¥–µ–ª–∞–µ—Ç –∂–∞—Ä–∫–æ", "–Ω–∞–≥—Ä–µ–≤–∞–µ—Ç", "—É—Ç–µ–ø–ª—è–µ—Ç", "–æ–±–∂–∏–≥–∞–µ—Ç", "–∫—É–ø–∞–µ—Ç –≤ –ª–∞–≤–µ"]
        rpemodz = ["ü¶ãüå°üòµ‚Äçüí´", "ü¶ã‚òÄÔ∏èüï∫", "ü¶ãüß£üíÉ", "ü¶ãüî•üëæ", "ü¶ãüåãüôÄ"]
    else:
        rpword = ["–¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ", "–æ—Ö–ª–∞–∂–¥–∞–µ—Ç", "–æ—Å–≤–µ–∂–∞–µ—Ç", "–∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç", "–∫—É–ø–∞–µ—Ç –≤ –ø—Ä–æ—Ä—É–±–∏"]
        rpemodz = ["üßë‚Äçüíªü•∂", "üßë‚Äçüíªüßäüï∫", "üßë‚Äçüíªüí®üíÉ", "üßë‚Äçüíªüå™üëæ", "üßë‚ÄçüíªüåäüôÄ"]
    
    action = rpword[user2[4]]
    rpemodz = rpemodz[user2[4]]
    

    
    await message.answer(f"{html.escape(rpemodz)} | <a href='tg://user?id={user[0]}'>{html.escape(nick)}</a> {html.escape(action)} <a href='tg://user?id={user2[0]}'>{html.escape(nick2)}</a>", parse_mode="html")

    return
