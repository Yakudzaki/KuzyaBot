from loader import dp, bot
from aiogram import types
import openai  #pip install openai
from settings import kuzya_news_link, botik_id
import requests
import html
import g4f, asyncio
from utils.db.db_utils_users import *
from utils.db.db_utils_warning import *
from utils.db.db_utils_—Åhats import *
from ..f_lib.other import is_sub
from gradio_client import Client
from googletrans import Translator


print("g4f.version - " + g4f.version)  # Check version
print(g4f.Provider.Ails.params)  # Supported args

keys = openai.api_key = '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'
# # translator = Translator()


@dp.message_handler(commands=['–∫—É–∑—è', '—á–∞—Ç', 'chat'], commands_prefix="!/.")
async def chatgpt(message: types.Message):
    if message.chat.type != 'private':
        chats = message.chat.id #–û—Ç—Å—é–¥–∞ –∏ –¥–∞–ª–µ–µ, –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ - –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–∏–∫–æ–ª–∞.
        chat = get_chat(chats)
        if check_chat(message.chat.id):
            create_chat(message.chat.id)
            chat = get_chat(chats)
    
        funny = chat[4] #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–∫–æ–ª–æ–≤
        if not funny:
            await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
            return
        
        warner = get_warner(message.chat.id, message.from_user.id)
        if warner == None:
            warner = [message.chat.id, message.from_user.id, 0, 0, 0]
        if warner[4] != 0:
            return
    # await message.reply("üèñÔ∏è –ö—É–∑—èGpt –≤ –æ—Ç–ø—É—Å–∫–µ (—Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã)")
    # return

    sub = await is_sub(message)
    if sub == False:
        return 1
    
    if message.reply_to_message and message.reply_to_message.from_user.id == botik_id and not message.text.startswith("!") and not message.text.startswith(".") and not message.text.startswith("/"):
        promt = message.text
    
    else:
        command = message.text.split()[0]
        promt = message.text.replace(f'{command} ', '')
        if promt == command:
            msg = await message.reply("<b>‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å!</b>")
            return 1
    
    user = f"{message.from_user.first_name}" 
    await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)

    response = await chatgptg4f(promt, user, g4f.models.gpt_4)
    if f"{response}" == "" or "ÊÇ®ÁöÑÂÖçË¥πÈ¢ùÂ∫¶‰∏çÂ§ü‰ΩøÁî®Ëøô‰∏™Ê®°ÂûãÂï¶ÔºåËØ∑ÁÇπÂáªÂè≥‰∏äËßíÁôªÂΩïÁªßÁª≠‰ΩøÁî®" in f"{response}" or "ËØ∑Ê±ÇÂ§±Ë¥•Âï¶" in f"{response}":
        if "ÊÇ®ÁöÑÂÖçË¥πÈ¢ùÂ∫¶‰∏çÂ§ü‰ΩøÁî®Ëøô‰∏™Ê®°ÂûãÂï¶ÔºåËØ∑ÁÇπÂáªÂè≥‰∏äËßíÁôªÂΩïÁªßÁª≠‰ΩøÁî®" in f"{response}":
            print("–ö–∏—Ç–∞–π—Å–∫–∞—è  –∫–≤–æ—Ç–∞!")
        
        print("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ì–ü–¢ 3.5!")
        response = await chatgptg4f(promt, user, "gpt-3.5-turbo")
        if f"{response}" == "" or "ÊÇ®ÁöÑÂÖçË¥πÈ¢ùÂ∫¶‰∏çÂ§ü‰ΩøÁî®Ëøô‰∏™Ê®°ÂûãÂï¶ÔºåËØ∑ÁÇπÂáªÂè≥‰∏äËßíÁôªÂΩïÁªßÁª≠‰ΩøÁî®" in f"{response}":
            if "ÊÇ®ÁöÑÂÖçË¥πÈ¢ùÂ∫¶‰∏çÂ§ü‰ΩøÁî®Ëøô‰∏™Ê®°ÂûãÂï¶ÔºåËØ∑ÁÇπÂáªÂè≥‰∏äËßíÁôªÂΩïÁªßÁª≠‰ΩøÁî®" in f"{response}":
                print("–ö–∏—Ç–∞–π—Å–∫–∞—è  –∫–≤–æ—Ç–∞!")
            
    if "ËØ∑Ê±ÇÂ§±Ë¥•Âï¶" in f"{response}":
        print("–ì–ª—é–∫ –∫–∏—Ç–∞–π—Å–∫–æ–π –Ω–µ–π—Ä–æ–Ω–∫–∏!")
        response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —ç—Ç–∏–º –∑–∞–ø—Ä–æ—Å–æ–º."
    
    await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
    await message.reply(f"{response}\n\n–ö—É–∑—èGpt", disable_web_page_preview=True, parse_mode='Markdown')
    return 1

async def chatgptg4f(promt, user, moddel):
    response = ""
    i = 0
    while response == "":
        i = i + 1
        if i == 5:
            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —ç—Ç–∏–º –∑–∞–ø—Ä–æ—Å–æ–º."
            print("i==5")
        try:
            response = await g4f.ChatCompletion.create_async(
                model = moddel,
                messages=[{"role": user, "content": promt}],
                stream = False,
            )
        except Exception as e:
            print(e)
            return response
    return response


@dp.message_handler(commands=['–∑–≤—É–∫'], commands_prefix="!/.")
async def sound(message: types.Message):
    if message.chat.type != 'private':
        chats = message.chat.id #–û—Ç—Å—é–¥–∞ –∏ –¥–∞–ª–µ–µ, –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ - –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–∏–∫–æ–ª–∞.
        chat = get_chat(chats)
        if check_chat(message.chat.id):
            create_chat(message.chat.id)
            chat = get_chat(chats)
    
        funny = chat[4] #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–∫–æ–ª–æ–≤
        if not funny:
            await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
            return
        
        warner = get_warner(message.chat.id, message.from_user.id)
        if warner == None:
            warner = [message.chat.id, message.from_user.id, 0, 0, 0]
        if warner[4] != 0:
            return

    command = message.text.split()[0]
    promt = message.text.replace(f'{command} ', '')
    if promt == command:
        msg = await message.reply("<b>‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å!</b>")
        return
    await bot.send_chat_action(message.chat.id, types.ChatActions.RECORD_VOICE)
    translated_text = translator.translate(promt, dest='en').text
    client = Client("https://declare-lab-tango.hf.space/")
    file_search = client.predict(
            f"{translated_promt}",
            100,
            3,
            api_name="/predict"
    )
    
    await bot.send_chat_action(message.chat.id, types.ChatActions.UPLOAD_VOICE)
    await bot.reply_voice(chat_id=message.chat.id, voice=open(file_search, 'rb'))


@dp.message_handler(commands=['img'], commands_prefix="!/.")
async def handle_chat(message: types.Message):
    if message.chat.type != 'private':
        chats = message.chat.id #–û—Ç—Å—é–¥–∞ –∏ –¥–∞–ª–µ–µ, –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ - –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–∏–∫–æ–ª–∞.
        chat = get_chat(chats)
        if check_chat(message.chat.id):
            create_chat(message.chat.id)
            chat = get_chat(chats)
    
        funny = chat[4] #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–∫–æ–ª–æ–≤
        if not funny:
            await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã!")
            return
        
        warner = get_warner(message.chat.id, message.from_user.id)
        if warner == None:
            warner = [message.chat.id, message.from_user.id, 0, 0, 0]
        if warner[4] != 0:
            return
    
    
    result = process_img_step(message.text.replace('/img',  '').replace("!img", ""))
    text_photo = message.text.replace('/img',  '').replace("!img", "")
    if result == 'no key':
        await message.reply('<b>‚õ±Ô∏è ChatGpt –≤ –æ—Ç–ø—É—Å–∫–µ!</b> (—Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã)', disable_web_page_preview=True, parse_mode='html')
        return
    elif result == 'limit':
        await message.reply(f"<b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª—å—à–µ 60 —Å–∏–º–≤–æ–ª–æ–≤</b>!")
    elif result == 'bad':
        await message.reply(f"<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É</b>!")
    else:
        await bot.send_photo(message.chat.id, result, f"–¢–µ–∫—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {text_photo}", reply_to_message_id=message.message_id)


def process_img_step(messages):
    if len(messages) >= 61:
        return "limit"
    
    while True:
        try:
            response = requests.post(
                'https://api.openai.com/v1/images/generations',
                headers={'Content-Type': 'application/json', 'Authorization': f'Bearer {keys}'},
                json={'model': 'image-alpha-001', 'prompt': messages}
            )
            response_json = response.json()
            image_url = response_json['data'][0]['url']
            return image_url

        except Exception as er:
            print(er)
            if str(er) == "You exceeded your current quota, please check your plan and billing details.":
                return "bad"
            elif "Incorrect API key provided" in str(er):
                return "bad"
                
            else:
                return 'bad'
                

def process_chat_step(messages):
    if len(messages) >= 10001:
        return "limit"
    while True:
        try:
            chat_response = openai.Completion.create(
                engine="text-davinci-003",
                prompt=messages,
                max_tokens=2400,
                n=1,
                stop=None,
                temperature=0.3
            )
            return chat_response["choices"][0]["text"]

        except Exception as er:
            print(er)
            if str(er) == "You exceeded your current quota, please check your plan and billing details.":
                return "error"
            elif "Incorrect API key provided" in str(er):
                return "error"
            else:
            	return f"–ë—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞: {str(er)}"


def process_edit_step(messages):
    while True:
        try:
            openai.api_key = keys
            chat_response = openai.Image.create_variation(
                image=open(f"{messages}", "rb"),
                n=1,
                size="1024x1024"
            )
            return chat_response['data'][0]['url']

        except Exception as er:
            print(er)
            if str(er) == "You exceeded your current quota, please check your plan and billing details.":
                return "error"
            elif "Incorrect API key provided" in str(er):
                return "error"
            else:
            	return f"error"